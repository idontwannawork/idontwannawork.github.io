<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on 頑張らないために頑張る</title>
		<link>https://idontwannawork.github.io/posts/</link>
		<description>Recent content in Posts on 頑張らないために頑張る</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja</language>
		<lastBuildDate>Tue, 27 Aug 2019 13:50:30 +0900</lastBuildDate>
		<atom:link href="https://idontwannawork.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Vue cliとBuefyでシンプルに始めるVue.js - UIのコンポーネントを作成する</title>
			<link>https://idontwannawork.github.io/posts/make-dummy-text-generator-site-with-vuejs-add-ui/</link>
			<pubDate>Tue, 27 Aug 2019 13:50:30 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/make-dummy-text-generator-site-with-vuejs-add-ui/</guid>
			<description>はじめに 前回は、Vue CLIで作った環境の内容を確認しつつ、どのファイルがどのように参照されているか、どのファイルをどう変更してアプリケーシ</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p><a href="/posts/make-dummy-text-generator-site-with-vuejs-edit-component/">前回</a>は、Vue CLIで作った環境の内容を確認しつつ、どのファイルがどのように参照されているか、どのファイルをどう変更してアプリケーションを開発するかを確認しました。</p>

<p>今回はやっとこさ、コーディングします。もう内容は見切った！もう完璧だ！（死亡フラグ）</p>

<p>取っ掛かりにUI部分のコーディングをします。何はともあれ、まずは見た目です。</p>

<h2 id="と-その前に">と、その前に</h2>

<p>「そもそもどんなアプリケーション作るのよ？」ってところです。ここでは<strong>ダミーテキストを生成</strong>する機能を実装します。単純に、ちょっと今そういう機能が欲しいのです。</p>

<p>ちなみに、Vue.jsに限らないと思いますが、この手のチュートリアルはToDoリストが鉄板だと思います。</p>

<h2 id="コンポーネントの構成">コンポーネントの構成</h2>

<h3 id="必要な項目">必要な項目</h3>

<p>ダミーテキストジェネレータを実装するに当たって、ざっくりとどんなコンポーネント構成で実装するかを考えます。そこで、テキスト生成に必要なものはどんな機能か、ちょっと考えてみます。</p>

<ul>
<li>ダミーテキストの生成元を選択</li>
<li>生成する文字数を指定</li>
<li>その他オプション

<ul>
<li>各文章において改行の要否を選択</li>
<li>英数字出力時の全角・半角を選択</li>
<li>クリップボードへ出力結果をコピー</li>
</ul></li>
<li>条件はすべてお任せで一発生成</li>
</ul>

<p>こんなところでしょうか。ダミーテキストは青空文庫から入手するものとします。あと英文のダミーテキストが必要なら、<a href="https://ja.wikipedia.org/wiki/Lorem_ipsum">王道のアレ</a>ですかねぇ。</p>

<p>クリップボードへのコピーは正確にはテキストの内容に影響はしませんが、単純に機能として存在するとうれしいかな、と思って実装します。だって、文字列を生成するだけなのに、その都度ボタンを押して生成されたテキストをマウスなんかで選択してコピーして・・・ってしたくありませんし。それと同じ発想で、「このボタンを押せば、条件はすべてお任せでテキスト生成できるよ」という機能も実装したいなー。</p>

<p>ちなみに、意味のないただランダムに文字を並べただけの文字列が必要なシチュエーションを想定できなかったため、一応「読める文章」を生成するつもりです。なので、基本的には指定された文字数分、青空文庫の文章を切り出す感じに実装しようかと思います。適当に切り出したら文章の途中で終わっちゃうかもしれないから、その辺のケアは必要かもしれません。まぁ追々考えます。</p>

<h3 id="コンポーネントの分割">コンポーネントの分割</h3>

<p>必要があればコンポーネントを分割して疎結合にし、再利用が容易になるよう実装すべきでしょう。となると、分割できそうな、あるいは分割しても問題なさそうな部分はどのあたりかちょっと考えてみます。</p>

<p>とは言ったものの、先述した機能は画面に表示されるオブジェクトとして1つのコンポーネントにまとめちゃってもいいかもしれません。もちろん、それぞれを別コンポーネントにしっかり分割する、という方法もあります。が、今回のような小規模なアプリケーションにおいては、あんまり細分化するのもイマイチだなぁと思っています。たった数行のHTMLやJavaScriptのためにいくつもコンポーネントを分割するのは、保守性の面から考えれば本末転倒です。</p>

<p>というわけで、今回については1つのコンポーネントに<strong>全部乗せ</strong>することとします！（白目）あーでも、テキストの生成部分は別コンポーネントに分割するかもしれないなー・・・。</p>

<p>重ねて強調しますが、規模によってコンポーネントを分割する方が絶対保守性高いから！じゃないと後で泣きを見るから！！_(:3」∠)_（経験則）</p>

<h2 id="というわけで-uiの検討を">というわけで、UIの検討を</h2>

<p>UIコンポーネントはBuefyを利用するつもりだったので、まずは<a href="https://buefy.org/">オフィシャル</a>のドキュメントを参考にどんなインターフェイスを実装するか検討します。</p>

<h3 id="ダミーテキストの生成元の選択">ダミーテキストの生成元の選択</h3>

<p>これはもう<a href="https://buefy.org/documentation/radio">Radio</a>一択でしょう。いくつかある選択肢のうち、1つだけ選ぶとなればRadioで決まりです。</p>

<h3 id="生成する文字数">生成する文字数</h3>

<p>デフォルトを100文字として、フォームに任意の数値を入力してもらう方法にしようかな・・・と思っていたら<a href="https://buefy.org/documentation/numberinput">Numberinput</a>という機能を発見。おお、これいいじゃん。ただ、デフォルトでは「＋」をクリックしたときに1しか増加しないので、「200文字出力したいから、スタートが100だとすると100回クリックすることに・・・？」ってなるからステップの調整は必須ですね。</p>

<p>あるいは<a href="https://buefy.org/documentation/slider">Slider</a>でもいいかもしれません。この辺は実装してみてから使用感を比べて、どっちがいいか考えます。場合によっては両刀使いもいいかもしれません。</p>

<h3 id="その他オプション">その他オプション</h3>

<h4 id="各文章において改行の要否">各文章において改行の要否</h4>

<p>これは単純にYes/Noなので<a href="https://buefy.org/documentation/switch">Switch</a>でいいと思います。</p>

<h4 id="英数字出力時の全角-半角を選択">英数字出力時の全角・半角を選択</h4>

<p>これも全角または半角のいずれかなので<a href="https://buefy.org/documentation/switch">Switch</a>でいいと思います。</p>

<h4 id="必ず句点で終わる">必ず句点で終わる</h4>

<p>これも単純にYes/Noのいずれかなので<a href="https://buefy.org/documentation/switch">Switch</a>でいいと思います。</p>

<p>この機能ですが、任意の文字数を入力させた場合、文章を最後まで生成できず途中で終わってしまう可能性があります。そこで、「句点まではテキストを生成する」条件を設定しておきます。この条件を指定すると、入力された文字数プラスαのテキストが生成されることになります。なお、英文の場合はピリオドです。実装はJavaScript側のハナシなので、今回はあくまでも見た目です。</p>

<h4 id="クリップボードへのコピー">クリップボードへのコピー</h4>

<p>これはもう<a href="https://buefy.org/documentation/button">ボタン</a>かな。単純に「クリップボードへコピーする」みたいな文字列だけでもいいかもしれません。が、ボタンならより見やすく「これ押せば何かしら処理するだろう」感を演出するためにも、目立つオブジェクトはあった方がいいかと。</p>

<h2 id="そんなわけでコーディング">そんなわけでコーディング</h2>

<p>任意の名前で<code>.vue</code>ファイルを作成します。作成したvueファイルについてコーディングするとVisual Studio Code（以下vscode）が下画像のように補完してくれます。すごい助かる（小並感）</p>

<p>ちなみに下画像にもあるように、<code>script</code>部分の記述にはTypeScriptを利用できます（上から2番目に<code>typescript</code>の文字が確認できますね）。ただ、今回は純粋にJavaScriptを利用しています。これは単純にいろいろ手を出しすぎると自分の頭では収集が付かなくなるからで、TypeScriptが書ける人はわざわざJavaScriptを記述する必要はないと思います。</p>

<p><img src="2019-08-23-14-50-46.png" alt="pic" /></p>

<h3 id="実際のコード">実際のコード</h3>

<p>そこそこ長くなったので、折りたたみます。</p>

<p><details>
<summary>HTMLソース</summary></p>

<pre><code>&lt;template&gt;
    &lt;div id=&quot;generator&quot;&gt;
        &lt;div class=&quot;tile is-ancestor&quot;&gt;
            &lt;div class=&quot;tile is-parent is-6&quot;&gt;
                &lt;div class=&quot;tile is-child box container&quot;&gt;
                    &lt;div class=&quot;has-text-centered&quot;&gt;
                        &lt;b-tooltip class=&quot;title is-4&quot; label=&quot;生成するテキストの引用元を選択してください。&quot; position=&quot;is-bottom&quot; dashed multilined&gt;引用元&lt;/b-tooltip&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;blank1em&quot;&gt;&lt;/p&gt;
                    &lt;div class=&quot;field&quot;&gt;
                        &lt;b-radio v-model=&quot;textName&quot;
                            name=&quot;name&quot;
                            native-value=&quot;Lorem Ipsum&quot;&gt;
                            Lorem Ipsum
                        &lt;/b-radio&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;field&quot;&gt;
                        &lt;b-radio v-model=&quot;textName&quot;
                            name=&quot;name&quot;
                            native-value=&quot;Silver&quot;&gt;
                            Silver
                        &lt;/b-radio&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;field&quot;&gt;
                        &lt;b-radio v-model=&quot;textName&quot;
                            name=&quot;name&quot;
                            native-value=&quot;Jack&quot;&gt;
                            Jack
                        &lt;/b-radio&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;field&quot;&gt;
                        &lt;b-radio v-model=&quot;textName&quot;
                            name=&quot;name&quot;
                            native-value=&quot;Vane&quot;&gt;
                            Vane
                        &lt;/b-radio&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;radioValue&quot;&gt;
                        &lt;b&gt;選択した元ネタ:&lt;/b&gt;
                        {{ textName }}
                    &lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;tile is-parent is-6&quot;&gt;
                &lt;div class=&quot;tile is-child box&quot;&gt;
                    &lt;div class=&quot;has-text-centered&quot;&gt;
                        &lt;b-tooltip class=&quot;title is-4&quot; label=&quot;生成したい文字数を入力、またはスライドバーで選択してください。&quot; position=&quot;is-bottom&quot; dashed multilined&gt;出力する文字数&lt;/b-tooltip&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;blank2em&quot;&gt;&lt;/p&gt;
                    &lt;b-field&gt;
                        &lt;b-numberinput v-model=&quot;textNumber&quot; rounded controls-rounded&gt;
                        &lt;/b-numberinput&gt;
                    &lt;/b-field&gt;

                    &lt;b-field&gt;
                        &lt;b-slider v-model=&quot;textNumber&quot; max=&quot;300&quot;&gt;&lt;/b-slider&gt;
                    &lt;/b-field&gt;
                    &lt;p class=&quot;numberValue&quot;&gt;
                        &lt;b&gt;文字数:&lt;/b&gt;
                        {{ textNumber }}
                    &lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;tile is-ancestor&quot;&gt;
            &lt;div class=&quot;tile is-parent is-6&quot;&gt;
                &lt;div class=&quot;tile is-child box&quot;&gt;
                    &lt;div class=&quot;has-text-centered&quot;&gt;
                        &lt;b-tooltip class=&quot;title is-4&quot; label=&quot;出力する際の条件を設定してください。&quot; position=&quot;is-bottom&quot; dashed multilined&gt;出力オプション&lt;/b-tooltip&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;blank1em&quot;&gt;&lt;/p&gt;
                    &lt;div class=&quot;field&quot;&gt;
                        &lt;b-checkbox v-model=&quot;selecedOptions&quot;
                            native-value=&quot;Silverhoge&quot;&gt;
                            Silverhoge
                        &lt;/b-checkbox&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;field&quot;&gt;
                        &lt;b-checkbox v-model=&quot;selecedOptions&quot;
                            native-value=&quot;Flinthoge&quot;&gt;
                            Flinthoge
                        &lt;/b-checkbox&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;field&quot;&gt;
                        &lt;b-checkbox v-model=&quot;selecedOptions&quot;
                            native-value=&quot;Vanehoge&quot;&gt;
                            Vanehoge
                        &lt;/b-checkbox&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;field&quot;&gt;
                        &lt;b-checkbox v-model=&quot;selecedOptions&quot;
                            native-value=&quot;Billyhoge&quot;&gt;
                            Billyhoge
                        &lt;/b-checkbox&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;content&quot;&gt;
                        &lt;b&gt;Selection:&lt;/b&gt;
                        {{ selecedOptions }}
                    &lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;tile is-parent is-6&quot;&gt;
                &lt;div class=&quot;tile is-child box&quot;&gt;
                    &lt;div class=&quot;has-text-centered&quot;&gt;
                        &lt;b-tooltip class=&quot;title is-4&quot; label=&quot;テキストを生成してクリップボードへコピーします。&quot; position=&quot;is-bottom&quot; dashed multilined&gt;テキスト生成&lt;/b-tooltip&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;blank5em&quot;&gt;&lt;/p&gt;
                    &lt;div class=&quot;has-text-centered&quot;&gt;
                        &lt;b-button size=&quot;is-medium&quot; icon-left=&quot;clipboard-text&quot; @click=&quot;alert&quot;&gt;テキスト生成する&lt;/b-button&gt;
                    &lt;/div&gt;
                    &lt;h1&gt;{{ msg }}&lt;/h1&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;p class=&quot;blank1em&quot;&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<p></details></p>

<h3 id="uiの実装について">UIの実装について</h3>

<h4 id="配置">配置</h4>

<p>それぞれの配置は<a href="https://bulma.io/documentation/layout/tiles/">Tiles</a>で調整することにしました。これならPCで見てもモバイルで見ても問題ありません。</p>

<p><img src="2019-08-27-16-30-01.png" alt="pic" /></p>

<p><a href="https://bulma.io/documentation/columns/basics/">Grid</a>でもいいんじゃね？ってところなんですが、Tilesだと各要素の縦横サイズを自由に変更できます。この自由度の高さとタグの記述量でTilesを今回は採用しました。まぁ、結果から言えば縦横のサイズを変更する必要がなくなっちゃったんですけどね・・・_(:3」∠)_</p>

<p><img src="2019-08-27-16-36-56.png" alt="pic" /></p>

<p>ちなみに<a href="https://bulma.io/documentation/layout/tiles/">Tiles</a>は入れ子構造になのですが、単純に子タイルを並べるとタイルの間に隙間がありません。これで問題がないならいいのですが、今回はレイアウト的に隙間が欲しかったので、1つの親タイルに対し子タイルを1つのみ指定するようにしました。このように記述することで隙間の空いた配置を実装できます。</p>

<p>実際にコードのコードは下記を参照してみてください。</p>

<p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="idontwannawork" data-slug-hash="MWgmBye" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Buefy-Tiles">
  <span>See the Pen <a href="https://codepen.io/idontwannawork/pen/MWgmBye/">
  Buefy-Tiles</a> by idontwannawork (<a href="https://codepen.io/idontwannawork">@idontwannawork</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script></p>

<h4 id="引用元">引用元</h4>

<p>予定通り<a href="https://buefy.org/documentation/radio">Radio</a>で作成しました。</p>

<h4 id="文字数">文字数</h4>

<p><a href="https://buefy.org/documentation/numberinput">Numberinput</a>と<a href="https://buefy.org/documentation/slider">Slider</a>の併用で実装しました。細かい調整はNumberinputのボタンで、ざっくりとした調整はSliderでできます。もちろん、スマホなどでも問題ありません。それぞれのオブジェクトで同じデータをバインドしているので、片方で値を調整するともう片方も自動的に反映されます。</p>

<p>ちなみにステップ数を設定すると、Numberinputのプラスあるいはマイナスをクリックした際に、指定したステップ数の分加減算してくれます。ただし、設定されたステップ数で割り切れない値はエラーになります。たとえばステップ数を10に設定した場合、「23」みたいな10で割り切れない値はエラーになってしまいます。しかも、ご丁寧に「有効な値」を提案までした上で。</p>

<p><img src="2019-08-28-10-14-41.png" alt="pic" /></p>

<p>入力値を制限したいのではなく、単純に入力の手間をを省きたかっただけなのでステップ数の指定は止めました。</p>

<h4 id="出力オプション">出力オプション</h4>

<p><a href="https://buefy.org/documentation/switch">Switch</a>で実装する予定だったんですが、そもそもそれぞれの条件は独立していて相関性がないことを考慮すると、わざわざSwitchで実装する意味はあまりないな、と考えなおしました。最終的には<a href="https://buefy.org/documentation/checkbox">CheckBox</a>で実装してます。質実剛健。</p>

<h4 id="生成と出力">生成と出力</h4>

<p><a href="https://buefy.org/documentation/button">Button</a>です。これも予定通りです。</p>

<h4 id="その他">その他</h4>

<p><a href="https://buefy.org/documentation/tooltip">Tooltip</a>を実装しました。機能の説明はしておきたいけど、あんまり画面がごちゃごちゃするのはイマイチという場合に使い勝手の良い機能です。ただ、複数行の表示は明示的に指定する必要があって、これを忘れると画面からメッセージが飛び出ます。さすがに、勝手に出現位置を調整する、とかはしてくれませんでした。仕方ないね_(:3」∠)_</p>

<p><img src="2019-08-27-16-46-28.png" alt="pic" /></p>

<h2 id="おわりに">おわりに</h2>

<p>とりあえずこれでUIの実装は完了です。基本的には、Buefyのドキュメントページを参照しつつ、サンプルのHTMLソースをコピーして調整すれば実装が可能です。この手間のかからない感じがいいですね。しかも<code>npm run serve</code>を実行してブラウザで参照していると、ソースの変更を察知して自動的に反映してくれるので「ソース修正→保存→ブラウザで即確認」がスムーズにできます。とてもいい感じです。</p>

<p>というわけで、次回はJavaScriptでテキスト生成機能を実装したいと思います。</p>
]]></content>
		</item>
		
		<item>
			<title>vue-cli-service: command not foundと言われたらnode_modulesを削除</title>
			<link>https://idontwannawork.github.io/posts/fix-vue-cli-service-command-not-found-error/</link>
			<pubDate>Fri, 23 Aug 2019 20:59:07 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/fix-vue-cli-service-command-not-found-error/</guid>
			<description>はじめに Vue.jsのツール「Vue CLI」にて作成したプロジェクトをクローンしてnpm run serveをしたところ、下記のようなエラーメッセー</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p>Vue.jsのツール「Vue CLI」にて作成したプロジェクトをクローンして<code>npm run serve</code>をしたところ、下記のようなエラーメッセージが出てきてしまいました。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">❯ npm run serve

&gt; dtg@0.1.0 serve /Users/hoge/dummytextgen
&gt; vue-cli-service serve

sh: vue-cli-service: command not found
npm ERR! file sh
npm ERR! code ELIFECYCLE
npm ERR! errno ENOENT
npm ERR! syscall spawn
npm ERR! dtg@0.1.0 serve: `vue-cli-service serve`
npm ERR! spawn ENOENT
npm ERR! 
npm ERR! Failed at the dtg@0.1.0 serve script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
npm WARN Local package.json exists, but node_modules missing, did you mean to install?
npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/hoge/.npm/_logs/2019-08-23T11_44_05_763Z-debug.log</code></pre></div>
<p><code>vue-cli-service: command not found</code>って言われてもなぁ・・・。とりあえず調べますか。</p>

<h2 id="環境">環境</h2>

<ul>
<li>macOS Mojave 10.14.6</li>
<li>npm 6.9.2</li>
<li>Vue CLI 3.11.0</li>
<li>Visual Studio Code version 1.35</li>
</ul>

<p>ちなみに、これのクローン元のデータはWindowsで作成していました。基本的にnpmやVue CLIのバージョンは一緒だと思います。</p>

<h2 id="結論">結論</h2>

<p>下記のコマンドを実行しよう！</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">rm -rf node_modules package-lock.json &amp;&amp; npm install</code></pre></div>
<p><a href="https://github.com/vuejs/vue-cli/issues/2404">ここのissues</a>に記載があった。助かった！</p>
]]></content>
		</item>
		
		<item>
			<title>Vue cliとBuefyでシンプルに始めるVue.js - コンポーネントの中身を見てみる</title>
			<link>https://idontwannawork.github.io/posts/make-dummy-text-generator-site-with-vuejs-edit-component/</link>
			<pubDate>Wed, 21 Aug 2019 13:05:14 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/make-dummy-text-generator-site-with-vuejs-edit-component/</guid>
			<description>はじめに 前回は環境構築で終わってしまいましたが、今回から本格的に開発を始めていきます。取っ掛かりとして、Vue CLIで作った環境の内容を確認</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p><a href="/posts/make-dummy-text-generator-site-with-vuejs/">前回</a>は環境構築で終わってしまいましたが、今回から本格的に開発を始めていきます。取っ掛かりとして、Vue CLIで作った環境の内容を確認しつつ、どのファイルがどのように参照されているか、どのファイルをどう変更してアプリケーションを開発するかを確認します。</p>

<h2 id="まずはプロジェクトを俯瞰する">まずはプロジェクトを俯瞰する</h2>

<p>何はともあれ、Vue CLIで<code>create</code>した直後の環境を俯瞰してみます。</p>

<p><img src="2019-08-21-13-31-41.png" alt="pic" /></p>

<h3 id="なにはともあれindex">なにはともあれindex</h3>

<p>とりあえずファイルの名前で判断して、<code>index.html</code>あたりを見てみます。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;IE=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width,initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;icon&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;&lt;%= BASE_URL %&gt;favicon.ico&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>dtg<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">noscript</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>We&#39;re sorry but dtg doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">noscript</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="c">&lt;!-- built files will be auto injected --&gt;</span>
  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></div>
<p>なんとなく<code>&lt;div id=&quot;app&quot;&gt;</code>あたりが気になりますが、内容としてはあっさりしたものです。というかこれ、どこでVue.jsとか読み込んでるの・・・？CSSとかも全然記述ないけど・・・？</p>

<p>結論から言えば、現状の状態は「動作する実体」では<strong>ありません</strong>。ただの生成元でありテンプレートです。というわけで、実体を生成・参照するためにビルドを行う必要がありますので、下記のコマンドを実行します。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">npm run build</code></pre></div>
<p>しばらく待つとメッセージが表示されるはずです。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console"> DONE  Build complete. The dist directory is ready to be deployed.
 INFO  Check out deployment instructions at https://cli.vuejs.org/guide/deployment.html</code></pre></div>
<p>すると今までのフォルダ体系に、<code>dist</code>というフォルダが追加されていると思います。もう名前からしてそれっぽいですね。</p>

<p><img src="2019-08-21-15-22-11.png" alt="pic" /></p>

<p>ファイル名はともかく、フォルダ構成はなんか「それっぽい」ですよね。というわけで、改めて<code>index.html</code>を参照してみます。ただし、今度は<code>dist</code>配下にいる<code>index.html</code>です。ちなみに、下のソースは読みやすいように改行を入れてますが、元の状態は改行なしです。おいおい。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">en</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">utf-8</span><span class="p">&gt;&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">X-UA-Compatible</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;IE=edge&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">viewport</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width,initial-scale=1&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">icon</span> <span class="na">href</span><span class="o">=</span><span class="s">/favicon.ico</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>dtg<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">/css/app.e2713bb0.css</span> <span class="na">rel</span><span class="o">=</span><span class="s">preload</span> <span class="na">as</span><span class="o">=</span><span class="s">style</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">/css/chunk-vendors.17c0942e.css</span> <span class="na">rel</span><span class="o">=</span><span class="s">preload</span> <span class="na">as</span><span class="o">=</span><span class="s">style</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">/js/app.c471aa62.js</span> <span class="na">rel</span><span class="o">=</span><span class="s">preload</span> <span class="na">as</span><span class="o">=</span><span class="s">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">/js/chunk-vendors.68bf7d69.js</span> <span class="na">rel</span><span class="o">=</span><span class="s">preload</span> <span class="na">as</span><span class="o">=</span><span class="s">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">/css/chunk-vendors.17c0942e.css</span> <span class="na">rel</span><span class="o">=</span><span class="s">stylesheet</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">/css/app.e2713bb0.css</span> <span class="na">rel</span><span class="o">=</span><span class="s">stylesheet</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">noscript</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>We&#39;re sorry but dtg doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">noscript</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">app</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">/js/chunk-vendors.68bf7d69.js</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">/js/app.c471aa62.js</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></div>
<p>うんうん、ビルド前の<code>index.html</code>の比べると、JavaScriptやCSSが読み込まれているのが見て取れます。なるほど、とりあえずビルドすりゃいいんだな！（白目）読み込む対象のファイル名が明らかに<code>src</code>フォルダ内に存在するJavaScriptやvueファイルとは異なりますが、ビルドされた結果のファイルなので気にしないこととします。</p>

<h3 id="javascriptを見てみる">JavaScriptを見てみる</h3>

<p>JavaScriptのソースである<code>main.js</code>を参照してみます。ちなみに、<a href="/posts/make-dummy-text-generator-site-with-vuejs/#buefyを導入する">前回のBuefy導入</a>に伴い、このソースは書き換わっています。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
<span class="k">import</span> <span class="nx">Buefy</span> <span class="nx">from</span> <span class="s1">&#39;buefy&#39;</span>
<span class="k">import</span> <span class="s1">&#39;buefy/dist/buefy.css&#39;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App.vue&#39;</span>

<span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Buefy</span><span class="p">)</span>

<span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">productionTip</span> <span class="o">=</span> <span class="kc">false</span>

<span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">render</span><span class="o">:</span> <span class="nx">h</span> <span class="p">=&gt;</span> <span class="nx">h</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span>
<span class="p">}).</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>
</code></pre></div>
<p>Vueインスタンスの生成時に<code>#app</code>を<a href="https://jp.vuejs.org/v2/api/#vm-mount">マウント</a>しています。<code>$mount</code>は、マウントされていないインスタンスに手動でマウントするためのメソッドです。上記の内容だとインスタンスに<code>el</code>オプションが存在しないので、<code>$mount</code>しないとマウントされていない状態になります。</p>

<blockquote>
<p>Vue インスタンスがインスタンス化において el オプションを受け取らない場合は、DOM 要素は関連付けなしで、”アンマウント(マウントされていない)” 状態になります。</p>
</blockquote>

<p>とは言え、これだけで何かをやっているわけでなく、<code>App.vue</code>をコンポーネントとして登録しているだけのようなので、今度は<code>App.vue</code>を参照してみます。</p>

<p>なお、描画関数<code>render</code>の部分<code>h =&gt; h(App)</code>は<a href="https://github.com/vuejs-templates/webpack-simple/issues/29">このissues</a>にその由来がありました。興味深かったので、別記事ででも掘り下げようかな・・・。</p>

<h3 id="app-vueを見てみる">App.vueを見てみる</h3>

<p><code>App.vue</code>の内容は下記の通りです。上からHTML、JavaScript、CSSの順に記述されていることがわかります。</p>
<div class="highlight"><pre class="chroma"><code class="language-vue" data-lang="vue">&lt;template&gt;
  &lt;div id=&#34;app&#34;&gt;
    &lt;img alt=&#34;Vue logo&#34; src=&#34;./assets/logo.png&#34;&gt;
    &lt;HelloWorld msg=&#34;Welcome to Your Vue.js App&#34;/&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import HelloWorld from &#39;./components/HelloWorld.vue&#39;

export default {
  name: &#39;app&#39;,
  components: {
    HelloWorld
  }
}
&lt;/script&gt;

&lt;style&gt;
#app {
  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
&lt;/style&gt;</code></pre></div>
<p>この中でJavaScriptの部分を参照してみると、<code>HelloWorld.vue</code>というコンポーネントを利用しています。</p>
<div class="highlight"><pre class="chroma"><code class="language-vue" data-lang="vue">&lt;script&gt;
import HelloWorld from &#39;./components/HelloWorld.vue&#39;

export default {
  name: &#39;app&#39;,
  components: {
    HelloWorld
  }
}
&lt;/script&gt;</code></pre></div>
<p><code>HelloWorld</code>という文字はHTMLのソース部分にもあって、タグとして利用されています。ただ、この部分だけ見ると<code>msg</code>に値をセットしているだけで、それ以上の挙動はちょっと追えそうにありません。</p>
<div class="highlight"><pre class="chroma"><code class="language-vue" data-lang="vue">    &lt;HelloWorld msg=&#34;Welcome to Your Vue.js App&#34;/&gt;</code></pre></div>
<p>ちなみに、この<code>msg</code>にセットされている文字列を変更すると出力した結果も変更されます。当たり前ですが。</p>
<div class="highlight"><pre class="chroma"><code class="language-vue" data-lang="vue">    &lt;HelloWorld msg=&#34;hoge fuga piyo&#34;/&gt;</code></pre></div>
<p><img src="2019-08-22-15-30-41.png" alt="pic" /></p>

<p>ということは、<code>HelloWorld.vue</code>ってコンポーネントを参照してみないと具体的なところはわからないな、という感じです。</p>

<h3 id="満を持してhelloworld-vue">満を持してHelloWorld.vue</h3>

<p>ではいよいよ<code>HelloWorld.vue</code>を参照します。今までのソースよりはHTMLの部分がいろいろ記述してあるため、ちょっとばっかり長いです。</p>
<div class="highlight"><pre class="chroma"><code class="language-vue" data-lang="vue">&lt;template&gt;
  &lt;div class=&#34;hello&#34;&gt;
    &lt;h1&gt;{{ msg }}&lt;/h1&gt;
    &lt;p&gt;
      For a guide and recipes on how to configure / customize this project,&lt;br&gt;
      check out the
      &lt;a href=&#34;https://cli.vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vue-cli documentation&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3&gt;Installed CLI Plugins&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&#34;https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;babel&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eslint&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;Essential Links&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&#34;https://vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Core Docs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://forum.vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://chat.vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://twitter.com/vuejs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://news.vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;News&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;Ecosystem&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&#34;https://router.vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vue-router&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://vuex.vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vuex&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://github.com/vuejs/vue-devtools#vue-devtools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vue-devtools&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://vue-loader.vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vue-loader&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://github.com/vuejs/awesome-vue&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;awesome-vue&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: &#39;HelloWorld&#39;,
  props: {
    msg: String
  }
}
&lt;/script&gt;

&lt;!-- Add &#34;scoped&#34; attribute to limit CSS to this component only --&gt;
&lt;style scoped&gt;
h3 {
  margin: 40px 0 0;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
&lt;/style&gt;</code></pre></div>
<p>冒頭のHTMLソースには<code>{{ msg }}</code>という文字があります。Mustache構文ってやつで、いかにもテンプレートとして利用できそうな見た目です。実際、Vue.jsにおいて<a href="https://v1-jp.vuejs.org/guide/syntax.html">テキストのデータバインディングで一番基本的な形式</a>がこれです。また、JavaScriptの部分にも<code>msg: String</code>という宣言が見て取れます。ということは、やっぱり<code>App.vue</code>で設定した文字列が<code>msg</code>に格納されるわけですね。そうなると下記のような入れ子構造になっていると推測できます。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">|--index.html
|  |--App.vue
|  |  |--HelloWorld.vue</code></pre></div>
<p><code>HelloWorld.vue</code>には出力するページのメイン部分を記述して、値を変更する（あるいは時間を表示するなど値が不定である）場合などはMustache構文でテンプレートとして記述。これはこれとして、1つのコンポーネントとして扱う。<code>App.vue</code>には、Mustacheタグに対応したデータオブジェクトのプロパティ（ここでは<code>msg</code>）に値を何かしら設定することでデータの更新を行う・・・って感じですかねぇ。</p>

<p>とりあえず構造はなんとなくわかったような気がします。</p>

<h3 id="ちなみに">ちなみに</h3>

<p><code>asset</code>フォルダには現時点でロゴ（Vue.jsのロゴ）の画像ファイルが格納されているだけです。</p>

<h3 id="となると">となると</h3>

<p>Vue CLIで<code>create</code>したら下記の作業をすればよさそうです。</p>

<ul>
<li>index.htmlのタイトルを変更する。</li>
<li>main.jsにBuefyを追加する。</li>
<li>App.vueに機能を追加する。</li>
<li>HelloWorld.vueは削除する。</li>
<li>必要に応じてコンポーネントを追加する。</li>
</ul>

<p>機能ができあがってきたら<code>npm run serve</code>で挙動を確認したり<code>npm run build</code>でビルドしたりするわけですね。</p>

<h2 id="おわりに">おわりに</h2>

<p><a href="/posts/make-dummy-text-generator-site-with-vuejs/">前回</a>の終わりはこんなくだりでした。</p>

<blockquote>
<p>次回以降では<code>.vue</code>ファイルをいじって挙動を確認しつつ、webアプリの開発を進めてみようと思います。</p>
</blockquote>

<p><strong>「機能の実装してないじゃん！中身見ただけじゃん！」</strong> ほげ_(:3」∠)_</p>

<p>すいません、書いてたらずいぶん長くなってしまいました。それにしても、Vue.jsはオフィシャルのドキュメントが充実している上に、Vue CLIが出力したサンプルの内容も分かりやすい構造になっていて、とても好感が持てます。</p>

<p>次から、次からはなんとか満を持して実装したいと思います。†悔い改めて†_(:3」∠)_</p>
]]></content>
		</item>
		
		<item>
			<title>Vue cliとBuefyでシンプルに始めるVue.js - まずは環境の用意</title>
			<link>https://idontwannawork.github.io/posts/make-dummy-text-generator-site-with-vuejs/</link>
			<pubDate>Mon, 19 Aug 2019 15:23:26 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/make-dummy-text-generator-site-with-vuejs/</guid>
			<description>はじめに フロントの勉強としてVue.jsをいじってますが、Vue.jsのCLIを使ってシンプルなサイトを構築する際の手順についてまとめます。</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p>フロントの勉強としてVue.jsをいじってますが、Vue.jsのCLIを使ってシンプルなサイトを構築する際の手順についてまとめます。</p>

<p>まずは構築するにあたって、開発環境の用意を行います。なお今回は<a href="https://nuxtjs.org/">Nuxt.js</a>を利用しない（あるいは利用するまでもない）、ライトな用途を想定しています。SSRする必要がある、とかならNuxt.jsの導入を検討してみるべきかと思います。</p>

<h2 id="環境">環境</h2>

<ul>
<li>Windows 10</li>
<li>vue/cli@3.10.0</li>
<li>npm 6.4.1</li>
</ul>

<p><code>npm</code>を利用する場合は<a href="https://nodejs.org/ja/">Node.js</a>のインストールが必要です。</p>

<h2 id="インストール">インストール</h2>

<h3 id="vue-jsのインストール手順">Vue.jsのインストール手順</h3>

<p>Vue.jsのインストールには、<code>npm</code>を利用してローカルの環境に展開しておくか、<a href="/posts/build-environment-of-vuejs-with-docker/">Dockerで環境を準備</a>するか、CDNを利用します。</p>

<h4 id="npmによるインストール">NPMによるインストール</h4>

<p>ローカル環境にインストールする場合は、<a href="https://jp.vuejs.org/v2/guide/installation.html">オフィシャルページ</a>に則って下記のコマンドを実行します。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">npm install vue</code></pre></div>
<p>なお、オフィシャルでは<a href="https://jp.vuejs.org/v2/guide/installation.html#NPM">大規模なアプリを構築する場合はNPMを利用しろ</a>、とのことです。</p>

<blockquote>
<p>Vue.js による大規模アプリケーションを構築するときには、NPM を利用したインストールを推奨しています。</p>
</blockquote>

<h4 id="dockerによる環境構築">Dockerによる環境構築</h4>

<p><a href="/posts/build-environment-of-vuejs-with-docker/">こちら</a>をどうぞ。</p>

<h4 id="cdn">CDN</h4>

<p>NPMを利用したインストール以外にも<a href="https://unpkg.com/vue@2.6.10/dist/vue.js">unpkg</a>や<a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js">cdnjs</a>を利用することでVue.jsを利用できます。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></code></pre></div>
<p>なお、<a href="https://jp.vuejs.org/v2/guide/installation.html#CDN">本番環境ではバージョンを指定する</a>ことが推奨されています。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue@2.6.0&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></code></pre></div>
<blockquote>
<p>本番環境では、新しいバージョンによる意図しない不具合を避けるため、特定のバージョン番号とビルド番号にリンクすることをお勧めします</p>
</blockquote>

<h4 id="vue-cliの導入">Vue CLIの導入</h4>

<p>Vue CLIはVue.jsを用いたサイトを生成する際に、環境のセットアップを肩代わりしてくれるコマンドラインのツールです。<a href="https://cli.vuejs.org/">オフィシャルページ</a>を参考にして導入します。とは言っても難しいことではなく、下記のコマンドを実行するだけです。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">npm install -g @vue/cli</code></pre></div>
<p>インストールが終わったらバージョンを確認してみます。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">$ vue --version
3.10.0</code></pre></div>
<h2 id="プロジェクトを作成する">プロジェクトを作成する</h2>

<p><code>vue</code>コマンドを叩いてプロジェクトを作成します。なお、下記のコマンドを実行する際は、事前にプロジェクトを作成するフォルダに移動してください。ここではフォルダを<code>dummytextgen</code>とします。コマンドを実行すると対話形式で作成するプロジェクトの内容を設定します。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">cd dummytextgen
vue create dtg</code></pre></div>
<ol>
<li><p>プリセットの選択</p>

<p>キーボードの上下キーで選択しますが、デフォルトで問題ないと思います。なお、vue routerやvuexを利用することが確定しているなら、<code>Manually select feature</code>を選択して手動で導入できます。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">Vue CLI v3.10.0
? Please pick a preset: (Use arrow keys)
&gt; default (babel, eslint)
Manually select features</code></pre></div></li>

<li><p>パッケージマネージャの選択</p>

<p>こちらもキーボードの上下キーで選択します。デフォルトでは<code>yarn</code>にカーソルが当たっていましたが、<code>npm</code>を利用しているので<code>Use NPM</code>を選択してエンターキーを押します。ちなみに、この選択肢が表示されるのはvue cliを起動した初回だけだと思われます（自分の環境だと今はもう出てこない）。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console"><span class="nx">Vue</span> <span class="nx">CLI</span> <span class="nx">v3</span><span class="mf">.10.0</span>
<span class="err">?</span> <span class="nx">Please</span> <span class="nx">pick</span> <span class="nx">a</span> <span class="nx">preset</span><span class="p">:</span> <span class="k">default</span> <span class="p">(</span><span class="nx">babel</span><span class="p">,</span> <span class="nx">eslint</span><span class="p">)</span>
<span class="err">?</span> <span class="nx">Pick</span> <span class="nx">the</span> <span class="kn">package</span> <span class="nx">manager</span> <span class="nx">to</span> <span class="nx">use</span> <span class="nx">when</span> <span class="nx">installing</span> <span class="nx">dependencies</span><span class="p">:</span> <span class="p">(</span><span class="nx">Use</span> <span class="nx">arrow</span> <span class="nx">keys</span><span class="p">)</span>
<span class="p">&gt;</span> <span class="nx">Use</span> <span class="nx">Yarn</span>
<span class="nx">Use</span> <span class="nx">NPM</span></code></pre></div></li>

<li><p>しばらく待ちます</p>

<p>上記までの選択を行ったあとはしばらく待ちます。すると下記のようなメッセージが出力されるはずです。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">Successfully created project dtg.
Get started with the following commands:

$ cd dtg
$ npm run serve</code></pre></div>
<p>となったら、準備完了です。</p></li>

<li><p>とりあえず実行してみる</p>

<p>メッセージの通り、コマンドを実行してみます。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">cd dtg
npm run serve</code></pre></div>
<p>正常に起動したらURLが表示されるはずなので、そのアドレスをブラウザにコピペしてアクセスしてみます。今回は<code>http://localhost:34201/</code>でした。</p>

<p><img src="2019-08-19-16-36-07.png" alt="pic" /></p>

<p>プロジェクトが作成されて、開発のサーバーが起動していることがこれで確認できました。</p></li>
</ol>

<h2 id="プロジェクトの内容を見てみる">プロジェクトの内容を見てみる</h2>

<p>作成したプロジェクトの内容を見てみます。下記はフォルダ内容をVisual Studio Code（以下、vscode）で表示した様子です。</p>

<p><img src="2019-08-20-14-02-40.png" alt="pic" /></p>

<p><code>.js</code>や<code>.html</code>に混じって、<code>.vue</code>という見慣れない拡張子があります。これが<a href="https://jp.vuejs.org/v2/guide/single-file-components.html">Vue.jsの<strong>単一ファイルコンポーネント</strong></a>と呼ばれる機能です。</p>

<p>これはHTML・JavaScript・CSSの3つを1ファイルにまとめ、1コンポーネントとして扱うVue.js独特の機能です。また、この単一ファイルコンポーネントは拡張子が上記の通り<code>.vue</code>です。とりあえず今回は触れずにそのまま行きます。</p>

<h2 id="いろいろ導入する">いろいろ導入する</h2>

<h3 id="cssフレームワーク">CSSフレームワーク</h3>

<p>サイトを作るに当たって、画面のレイアウトはCSSフレームワーク（以下、FW）を使って楽をしたいところです。デザインセンスがないからね、仕方ないね_(:3」∠)_</p>

<p>FW、と来たら必ず名前が挙がる大定番の<a href="https://getbootstrap.com/">Bootstrap</a>ですが、今回はこれ以外のFWを利用します。というのも、いまだにjQueryが絡んで来るので「Vue.js使ってるのにjQuery使うの？（白目）」ってことになるので。あとは単純に他のFWも使ってみたいなー、っていう素朴な欲求から来てます。</p>

<p>というわけで、ここでは<a href="https://buefy.org/">Buefy</a>を利用します。これは<a href="https://bulma.io/">Bulma</a>をベースにした、Vue.jsの用のUIコンポーネントです。ちなみに、なんでBulmaよ？ってところなんですが下記のようなメリットがあります。</p>

<ul>
<li>シンプル</li>
<li>主要なコンポーネントはだいたい揃ってる</li>
<li>比較的軽量</li>
<li>JavaScriptなし</li>
</ul>

<p>このうち、Bulmaの「JavaScriptなし」という部分を<strong>Vue.jsを組み合わせることで補完したのがBuefy</strong>、ということになります。</p>

<p>とは言え、FWは結構好き嫌いがあると思うので、お気に入りのFWを導入するのが吉かと。個人的にはプロトタイプ作成に一時期<a href="https://ajusa.github.io/lit/">lit</a>を使ってました。めちゃくちゃ軽い（minifyかつgzip済みだと<strong>395バイト</strong>しかない！）のに、しっかりレスポンシブ対応なのはポイント高かったです。とは言え、軽量な分機能がそこそこ制限されちゃうんで、小規模なサイトかプロトタイプ作成でのみ利用してました。</p>

<h4 id="buefyを導入する">Buefyを導入する</h4>

<p>まずは<a href="https://buefy.org/documentation/start">オフィシャル</a>の手順に則って、下記のコマンドを実行します。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">npm install buefy</code></pre></div>
<p>次は、main.jsを編集します。Vue CLIで<code>create</code>した直後は、下の画像のような内容になっていると思います。</p>

<p><img src="2019-08-21-09-25-01.png" alt="pic" /></p>

<p>そこに、下記のソースを追記します。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span> <span class="c1">// この行はもともと記述されているはず
</span><span class="c1"></span><span class="k">import</span> <span class="nx">Buefy</span> <span class="nx">from</span> <span class="s1">&#39;buefy&#39;</span>
<span class="k">import</span> <span class="s1">&#39;buefy/dist/buefy.css&#39;</span>

<span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Buefy</span><span class="p">)</span>
</code></pre></div>
<p>なお、オフィシャルでは全機能のインポートを推奨していますが、下記のように「使用するコンポーネントだけインポートする」ことも可能です。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="k">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue&#39;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Table</span><span class="p">,</span> <span class="nx">Input</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;buefy&#39;</span>
<span class="k">import</span> <span class="s1">&#39;buefy/dist/buefy.css&#39;</span>

<span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Table</span><span class="p">)</span>
<span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">Input</span><span class="p">)</span>
</code></pre></div>
<h3 id="参考-vue-routerのインストール">（参考）vue routerのインストール</h3>

<p>環境のセットアップ時に導入せず、後になってvue routerが必要になった場合は下記の手順で導入します。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">npm install vue-router</code></pre></div>
<h3 id="参考-vuexのインストール">（参考）vuexのインストール</h3>

<p>環境のセットアップ時に導入せず、後になってvuexが必要になった場合は下記の手順で導入します。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">npm install vuex</code></pre></div>
<h2 id="ローカルで確認してみる">ローカルで確認してみる</h2>

<p>各種コンポーネントのインストールが終わったら、ここで確認してみます。</p>

<p>ターミナルでプロジェクトのあるフォルダまで移動し、下記のコマンドを実行します。このコマンドを実行することでソースのコンパイルとローカルサーバの起動が行われます。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">npm run serve</code></pre></div>
<p>実行したときのログはこんな感じ。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">C:\hoge\dtg&gt;npm run serve

&gt; dtg@0.1.0 serve C:\hoge\dtg
&gt; vue-cli-service serve

 INFO  Starting development server...
 98% after emitting CopyPlugin

 DONE  Compiled successfully in 35564ms
  App running at:
  - Local:   http://localhost:20645/
  - Network: http://***.***.***.***:20645/

  Note that the development build is not optimized.
  To create a production build, run npm run build.</code></pre></div>
<p>表示されたアドレスにアクセスしてみると、Vue CLIで<code>create</code>した直後とはフォントが変わっていることがわかります・・・かねぇ？</p>

<p><img src="2019-08-21-09-55-12.png" alt="pic" /></p>

<p>ちなみに、たまに<code>npm run dev</code>を実行しろって書いてあるブログがあったりするんですが、これを実行すると自分の環境では下記の通りエラーになりました。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">C:\hoge\dtg&gt;npm run dev
npm ERR! missing script: dev

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\hogehoge\AppData\Roaming\npm-cache\_logs\***debug.log</code></pre></div>
<p>これは<code>package.json</code>に<code>dev</code>の記述がないためです。実際ない_(:3」∠)_</p>

<p><img src="2019-08-21-10-11-13.png" alt="pic" /></p>

<p><a href="https://github.com/zalmoxisus/crossbuilder/issues/30">某所のissuesにも挙がってたりする</a>んだけど、routerをインストールしたら<code>npm run dev</code>できるようになったっていう記述があったりしますが、その辺の因果関係は不明です_(:3」∠)_</p>

<h2 id="おわりに">おわりに</h2>

<p>今回の記事は自分の備忘録を兼ねているため、そこそこ詳細に内容を記述しましたが、文章にするとごちゃごちゃと長くなってしまいました。が、実際の作業時間で言えば10分程度です。「あー、こんなアプリ欲しいなー、作ってみたいなー」と思ったら、ちゃっちゃとコマンドをいくつか実行するだけで開発環境が揃います。</p>

<p>次回以降では<code>.vue</code>ファイルをいじって挙動を確認しつつ、webアプリの開発を進めてみようと思います。</p>
]]></content>
		</item>
		
		<item>
			<title>Korgのvolca drumを買ったので軽くレビューしてみる</title>
			<link>https://idontwannawork.github.io/posts/korg-volca-drum-review/</link>
			<pubDate>Fri, 09 Aug 2019 16:03:40 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/korg-volca-drum-review/</guid>
			<description>まーた買っちゃった modularに引き続き、volca drumも買っちゃったい_(:3」∠)_ volcaとは volcaとは、KORGの生み出</description>
			<content type="html"><![CDATA[

<h2 id="まーた買っちゃった">まーた買っちゃった</h2>

<p><img src="IMG_0718.jpeg" alt="pic" /></p>

<p>modularに引き続き、<strong>volca drumも買っちゃったい</strong>_(:3」∠)_</p>

<h2 id="volcaとは">volcaとは</h2>

<p>volcaとは、KORGの生み出したシンセサイザーのシリーズでして、個人的にも大好きなシリーズです。コンパクトな筐体にハイエンドモデル顔負けの要素をこれでもかと積み込んで、<a href="https://www.korg.com/jp/products/dj/volca_modular/">美味しいところをコンパクトな筐体に詰め込んだセミモジュラーシンセ</a>だったり、かと思えば<a href="https://www.korg.com/jp/products/dj/volca_kick/">キック音に特化しまくった超絶ニッチだけどスゴく使えるキックジェネレーター</a>だったり、<a href="https://www.korg.com/jp/products/dj/volca_keys/">王道のポリフォニックなアナログシンセサイザー</a>などなどを生み出してきたシリーズです。</p>

<p>個人的にも今までに<a href="https://www.korg.com/jp/products/dj/volca_keys/index.php">keys</a>、<a href="https://www.korg.com/jp/products/dj/volca_bass/index.php">bass</a>、<a href="https://www.korg.com/jp/products/dj/volca_kick/index.php">kick</a>、<a href="https://www.korg.com/jp/products/dj/volca_sample/index.php">sample</a>などなど購入してきましたが、今回新たにリズムマシン・パーカッションシンセサイザーである<a href="https://www.korg.com/jp/products/dj/volca_drum/">volca drum</a>を購入しました！</p>

<h2 id="ちなみにvolca-modularは">ちなみにvolca modularは</h2>

<p>以前に購入したセミモジュラーシンセである<a href="/posts/korg-volca-modular-review/">volca modularのレビューはこちら</a>です。</p>

<h2 id="volca-drumとは">volca drumとは</h2>

<p>volca drum（以下、drum）はKORGがデジタル・パーカッション・シンセサイザーと銘打っているとおり、デジタルのリズムマシンです。すでにリリースされているvolca beatsやvolca kickがアナログのリズムマシンであることを考えると、今までにない新機軸の機種であることがわかります。ちなみに、volca sampleも同様にデジタルですが、こちらはサンプラーなので基本的にプレイバックが主な利用用途で、音作りに関しては限界があります。要は元のサンプルから大いに逸脱した音は作れないわけです。</p>

<p>対して、drumではDSPによるアナログモデリングによって音を編集して、volcaシリーズでお馴染みのシーケンサーでリズムパターンを組み立てます。drumのDSPは、オシレーター波形にサイン波、のこぎり波、ノイズなどを採用しています。オシレーターから出力された音にいろんな変化を加えることで、本物の打楽器に近似した音からデジタル特有の独特な音まで、ドラムだけにはとどまらず、幅広いバリエーションのパーカッション・サウンドを生成できます。</p>

<h2 id="パートの仕様">パートの仕様</h2>

<p>volca drumは合計で6つのパートを保持しています。また、これらのパートはそれぞれ個別に2つのレイヤーを持っています。これらのパートはそれぞれ同じ仕様です。「同じ仕様」とは各パートが同じオシレーター、モジュレーター、EGを保持していることを指しています。つまり「ここはバス・ドラム、ここはシンバル・・・」といったルールや制限はないため、バスドラムやスネアドラムを抜いたパターンを構築したり、全パートでそれぞれ微妙に異なるシンバル音を生成したりすることも可能です。極端なことを言えば、全パートで同じ音を生成することも可能なわけです。まぁ、実用性があるかどうかは、とりあえず別にして。</p>

<p>なお、パターンは最大16個まで保存が可能です。</p>

<p>各パートはそれぞれ2レイヤーを保持しています。各レイヤーのパラメーターは個別でも同時でも編集が可能なので、2つのレイヤーに同じ音を重ねて厚みを持たせることができます。</p>

<h2 id="ウェーブガイド-リゾネーター">ウェーブガイド・リゾネーター</h2>

<p>エフェクト部は、物理モデリングをベースとしたウェーブガイド・レゾネーターを搭載しています。これは、太鼓の胴や長いパイプのような筒状の残響音を加えるチューブと、スネアの音っぽいメタリックな感じの弦の響きを加えるストリングスの2タイプが選択可能です。パネル中央部の3つのツマミによりDECAY（減衰量）、BODY（音のキャラクター）、TUNE（ピッチ）の設定が可能で、TUNEを小さな値にすればショートディレイにもなります。これらのツマミはモーションシーケンスの対象です。</p>

<h2 id="シーケンサーなど">シーケンサーなど</h2>

<p>シーケンサーは他のvolcaシリーズやリズムマシンでもおなじみな、16ステップがベースのシーケンサーです。16ステップを1小節としてパターンを組み立てていきます。その中でdrumには即興性と表現力に優れた機能がいくつかあります。</p>

<h3 id="active-step">ACTIVE STEP</h3>

<p>ACTIVE STEPは各パートにおいて再生したいステップを任意に設定できる機能です。各パートごとに設定できるので、全体のうち1パートだけリアルタイムに再生するステップを変えたいっていう場合にも利用可能です。</p>

<h3 id="slice">SLICE</h3>

<p>たとえばスネアドラムのロールは、シーケンサーが16ステップである場合これより細かいステップでビートを設定はできません。ところが、SLICE機能を利用することで、16ステップよりさらに細かいステップを設定でき、さらにSLICEするレベルはツマミで変更可能です。</p>

<h3 id="accent">ACCENT</h3>

<p>アクセントです。これが設定されたステップは強拍になり、リズムのニュアンスを多彩に表現することが可能です。</p>

<h3 id="choke">CHOKE</h3>

<p>複数パートのうち、発音を優先させたいパートを設定できるのがCHOKE機能です。チョークを有効にしたパートは同時には発音せず、パート番号の小さい1パートの発音が優先されます。要はサイドチェイン、あるいはダッキングのような感じです。</p>

<h2 id="開封の儀">開封の儀</h2>

<p>さて、いつもの如く開封の儀です。</p>

<p><img src="IMG_0715.jpeg" alt="pic" /></p>

<p>相変わらず、ひと目見てそれとわかるKORGのガジェット特有のデザインであるパッケージがとても良いです。</p>

<p><img src="IMG_0716.jpeg" alt="pic" /></p>

<p>こちらもいつもの如く開封してすぐ出てくるマニュアル類。</p>

<p><img src="IMG_0717.jpeg" alt="pic" /></p>

<p>中の蓋を外すとdrum本体が出てきます。</p>

<p><img src="IMG_0718.jpeg" alt="pic" /></p>

<p>本体です。黒とゴールドの彩色で、高級感のあるデザインです。あまりこの価格帯でのガジェットにはない色彩ですよね。</p>

<h2 id="実際の動作の様子">実際の動作の様子</h2>

<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">volca drum買いました。特有の出音がクセになりそうな面白いガジェットですね<a href="https://twitter.com/hashtag/volca?src=hash&amp;ref_src=twsrc%5Etfw">#volca</a><a href="https://twitter.com/hashtag/korg?src=hash&amp;ref_src=twsrc%5Etfw">#korg</a> <a href="https://t.co/D2VT1rgejD">pic.twitter.com/D2VT1rgejD</a></p>&mdash; ysko (@unknown_strings) <a href="https://twitter.com/unknown_strings/status/1159623827975839744?ref_src=twsrc%5Etfw">August 9, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>いかにもダンストラック的な4つ打ちです。drumのDSPが出力する音は、結構特徴的であることがわかりますね。</p>

<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">他も<a href="https://twitter.com/hashtag/volca?src=hash&amp;ref_src=twsrc%5Etfw">#volca</a> <a href="https://twitter.com/hashtag/korg?src=hash&amp;ref_src=twsrc%5Etfw">#korg</a> <a href="https://t.co/eLEP0L5UON">pic.twitter.com/eLEP0L5UON</a></p>&mdash; ysko (@unknown_strings) <a href="https://twitter.com/unknown_strings/status/1159680380527497216?ref_src=twsrc%5Etfw">August 9, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>ドラムンベースのようなリズムパターン。スネアドラムにSLICE機能でロールを入れています。さらに「ぴょーん」という飛び道具的な音も組み込んでみました。</p>

<p>なお、このパターンではSwing機能の値をマイナス方向に設定しています。そうすることで、前のめりなノリになっていることがわかります。ちなみに、Swingをマイナス方向に設定するには、FUNCキーを押しながらSwingのツマミをいじることで、設定可能です。</p>

<h2 id="まとめ">まとめ</h2>

<p><strong>音作りの底なし沼。馴染みな音も奇抜な音もなんでもござれな個性的リズムマシン！</strong>です。</p>

<p>volca beatsと異なり、各パートで自由に音作りできる分とっかかりにくい印象を受けますが、一度慣れてしまえば実際のドラム音に似た音もそうじゃない音もコレ1台でこなせる多彩な表現力を持ったリズムマシンです。</p>

<p>個人的には変に実際のドラム音に近似した音を作るより、DSPの自由度に物言わせた「こんな音もリズムパターンに組み込んじゃうぜー！」みたいな奇抜な音をどんどん作って行きたいです。AutechreとかPlaidっぽいトラックを作るには最適なガジェットだと思います。</p>
]]></content>
		</item>
		
		<item>
			<title>Jupyter NotebookをVisual Studio Codeで実行する</title>
			<link>https://idontwannawork.github.io/posts/run-jupyter-notebook-with-vscode/</link>
			<pubDate>Fri, 02 Aug 2019 14:00:38 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/run-jupyter-notebook-with-vscode/</guid>
			<description>はじめに Visual Studio Code（以下、vscode）ではDockerでPythonやVue.jsの開発環境を構築したり、あるいはMarkdownで書い</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p>Visual Studio Code（以下、vscode）ではDockerで<a href="/posts/connect-to-docker-with-vscode-extension/">Python</a>や<a href="/posts/build-environment-of-vuejs-with-docker/">Vue.js</a>の開発環境を構築したり、あるいは<a href="/posts/convert-markdown-to-pdf-with-vscode/">Markdownで書いたドキュメントを配布用にPDF変換</a>したりと、今までいろいろやってきました。今度は<a href="https://jupyter.org/">Jupyter Notebook</a>を動かします。いやー、vscodeってホントに多彩ですね。</p>

<p>なお、今回においてはDockerを利用せず、単純にローカル環境でJupyterを使用します。</p>

<h2 id="jupyter-notebookとは">Jupyter Notebookとは</h2>

<p>Jupyter Notebook (なお、読み方は「ジュパイター・ノートブック」、または「ジュピター・ノートブック」。自分は「ジュピター」って言ってますが、どっちが一般的なんですかね？) とは、ブラウザ上で実行するデータ分析作業のためのツールです。特徴的なのは、<strong>実行結果を記録しながら</strong>プログラミングができる点です。<a href="https://jupyter.org/try">ここ</a>でブラウザから実行できます。</p>

<p>プログラムそのものを記述しつつ、Markdownを利用して各種テキストや図表も同時に書き込んでいくことが可能です。つまり、プログラムのソースとその実行結果が、メモを含めて明確に紐づいた状態で確認できます。そのため、作業内容の振り返りに非常に便利ですし、複数人で作業を行う場合の共有にも有用です。また、Jupyterは<code>*.ipynb</code>形式のファイルで保存しますが、ソースコード部分を<code>*.py</code>のPythonコードとして出力することも可能ですし、実行結果をPDFやHTML形式で出力できるため、Jupyterの実行環境がなくても内容を共有できます。</p>

<p>そんなJupyterをvscodeで使っちゃえ、というのが今回の趣旨です。</p>

<h2 id="環境">環境</h2>

<ul>
<li>Windows 10</li>
<li>Anaconda version 1.7.2</li>
<li>vscode 1.36</li>
</ul>

<h2 id="インストール">インストール</h2>

<p>Anacondaをインストールしている場合、基本的にはJupyterも一緒にインストールされているはずです。なお、Anacondaのインストールは、<a href="https://www.anaconda.com/">オフィシャルページ</a>からプラットフォームに合ったインストーラーをダウンロードして実行します。インストール後に下記のコマンドを実行すると、<code>conda</code>コマンドにてインストールされているリストが出力されます。表示されたリストの中に<code>jupyter</code>があればインストール済みであることがわかります。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">conda list</code></pre></div>
<p>ちなみに、Anacondaを導入しないでJupyterを利用するには<code>pip</code>を利用します。下記のコマンドを実行するだけです。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">pip install jupyter</code></pre></div>
<h2 id="vscodeで実行する">vscodeで実行する</h2>

<h3 id="拡張機能のインストール">拡張機能のインストール</h3>

<p>vscodeでJupyterを利用するには、Pythonの拡張機能をインストールする必要があります。</p>

<p>拡張機能をインストールするには、vscodeの左側にあるメニュー中から拡張機能のアイコン（下画像の赤枠内）をクリックします。</p>

<p><img src="2019-08-02-15-12-00.png" alt="pic" /></p>

<p>検索窓に「python」と入力します。検索結果のうち、「Python」を選択し、インストールします。なお、下画像ではすでにインストール済みのため、歯車のアイコンが表示されています。</p>

<p><img src="2019-08-02-15-15-04.png" alt="pic" /></p>

<p>他にも導入すると便利な拡張機能はありますが、今回は割愛します。</p>

<h3 id="vscodeでノートブックを書いてみる">vscodeでノートブックを書いてみる</h3>

<p>まず任意のフォルダを作成します。今回は<code>workdir</code>としましたが、フォルダ名はなんでもいいです。次にvscodeで先ほど作成したフォルダを開きます。フォルダを開いたら、適当にファイルを作成します。ただし、この際に作成する<strong>ファイルの拡張子は<code>*.py</code>です</strong>。先ほどJupyterでは<code>*.ipynb</code>形式を用いると言いましたが、vscodeで実行する場合はPythonの拡張子でファイルを作成します。</p>

<p>「だけど、それじゃあフツーのPythonコードを見分けがつかないじゃん！」と思ったあなたは正しい。つまりファイルの拡張子ではなく、ファイルの中身で見分けるわけです。</p>

<p>ファイルを<code>*.py</code>形式で作成したら、下記のコードを入力してください。なお、「その2」部分はCSVファイルがないとコケちゃうので、適当なCSVファイルを作っておくかコードを削除してください。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#%%</span>

<span class="c1">## その１</span>

<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="c1">#%%</span>

<span class="c1">## その２</span>

<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;C:</span><span class="se">\\</span><span class="s2">app</span><span class="se">\\</span><span class="s2">hoge.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;cp932&#34;</span><span class="p">)</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>

<span class="c1">#%%</span>

<span class="c1">## その3</span>

<span class="c1">### sin plot</span>

<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">pl</span>
<span class="kn">import</span> <span class="nn">matplotlib</span> <span class="kn">as</span> <span class="nn">mp</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1">### cos plot</span>

<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
<span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1">### tan plot</span>

<span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">axhline</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ls</span><span class="o">=</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">axvline</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ls</span><span class="o">=</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">pl</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">tan</span><span class="p">(</span><span class="n">z</span><span class="p">))</span>
<span class="n">pl</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></code></pre></div>
<p>何か見慣れない<code>#%%</code>という文字列が含まれていますが、これが<strong>普通のPythonコードとJupyterを見分けるコード</strong>です。これが「セル」という、Jupyter Notebookにおける区切りを表しています。これで区切られた領域が1つの実行単位です。これをvscode上で記述すると、「Run cell」とか表示されます。このボタンを押下するとセル単位で実行するか、別のセルも一緒くたに実行するかが選べます。</p>

<ul>
<li><p>Run cell</p>

<p>押下したセルのみ実行します。<code>Shift + Enter</code>を押下しても同様の結果が得られます。</p></li>

<li><p>Run Above</p>

<p>押下したセルの直前セルまで実行します。</p></li>

<li><p>Run Below</p>

<p>押下したセルから下のセルをすべて実行します。</p></li>
</ul>

<p>ちなみに、下画像で<code>#%%</code>の部分なんかに赤い波線が表示されていますが、これはflake8のlintに引っかかっているためです。ファイルの拡張子が<code>*.py</code>であるため、flake8が反応しちゃってるようです。「<code>import</code>はモジュールの冒頭に記述しろよぉ」とか言ってるわけですけど、ごめんね、これ<code>*.py</code>ファイルだけどJupyterなのよ_:(´ཀ`」 ∠):_</p>

<p><img src="2019-08-02-15-27-20.png" alt="pic" /></p>

<p>実行すると、右側に新しいタブで実行結果が表示されます。</p>

<p><img src="2019-08-02-15-35-43.png" alt="pic" /></p>

<p>なお、基本的にAnacondaをインストールしている場合は上記のコードがそのまま動作すると思います。が、Jupyterを<code>pip</code>でインストールした場合は、必要なパッケージを別途<code>pip install</code>してください。</p>

<h2 id="まとめ">まとめ</h2>

<p>基本的にJupyterはブラウザ上で気軽にPythonを記述できる便利な環境でしたが、vscodeと組み合わせることでコードの補完機能を利用でき、より一層気軽かつ便利にコードを記述できます。</p>

<p>ますますvscode依存が深まりそうです_:(´ཀ`」 ∠):_</p>
]]></content>
		</item>
		
		<item>
			<title>Unity Hubを使ってUnityをインストールする</title>
			<link>https://idontwannawork.github.io/posts/install-unity-with-unity-hub/</link>
			<pubDate>Thu, 11 Jul 2019 16:41:00 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/install-unity-with-unity-hub/</guid>
			<description>Unityって何さ Unity 世界で最も広くつかわれているゲーム開発エンジン。 様々な機能を備えたエディターと、業界で最も幅広いプラットフォームへのサポ</description>
			<content type="html"><![CDATA[

<h2 id="unityって何さ">Unityって何さ</h2>

<p><a href="https://unity.com/">Unity</a></p>

<blockquote>
<p>世界で最も広くつかわれているゲーム開発エンジン。 様々な機能を備えたエディターと、業界で最も幅広いプラットフォームへのサポートを利用して、ゲームやインタラクティブなコンテンツを制作する方法を学びましょう。</p>
</blockquote>

<p>「ゲーム開発エンジン」とは、画面描写、効果音やBGMなどの音楽管理、ステータスなどの各種データ管理などを総合して開発できる環境のこと。ただ、昨今ではゲームだけでなく映像制作にも用いられてますし、3Dに強いという特徴を生かして建築設計にも活用されているようです。すげぇ。</p>

<p>2Dを多用した映像制作ではちょっとアレかもしれませんが、3Dがメインならリアルタイムで3Dレンダリングが可能なUnityの強みを活用できそうです。<a href="https://unity.com/">Unityオフィシャル</a>を始めとしてナレッジも多いですし、販売されているテキストも充実しているのも、Unityの強みかもしれません。</p>

<p>何はともあれ、まずは環境を整備しようと思います。今回はインストールについて。</p>

<h2 id="環境">環境</h2>

<ul>
<li>macOS Mojave 10.14.5</li>
</ul>

<p>なお、インストールする対象は<a href="https://blogs.unity3d.com/jp/2019/04/16/introducing-unity-2019-1/">Unity 2019.1版</a>とします。</p>

<h2 id="エディション">エディション</h2>

<p>Unityには現在（2019年7月10日）エディションが3パターン存在します。</p>

<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">月額</th>
<th align="center">条件</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">Personal</td>
<td align="center">無料</td>
<td align="center">収入ならびに資金調達（自己資金を含む）の合計が年間10万ドルを超えない場合</td>
</tr>

<tr>
<td align="center">Pro with Teams Advanced</td>
<td align="center">15,000円</td>
<td align="center">条件なし</td>
</tr>

<tr>
<td align="center">Plus</td>
<td align="center">～3000円</td>
<td align="center">個人・法人問わず、年間収益ならびに資金調達（自己資金を含む）の合計が20万米ドル以下の場合</td>
</tr>
</tbody>
</table>

<p>エディション構成あるいは月額は、ある程度のスパンで更新されると思うので、<a href="https://unity.com/">Unityオフィシャル</a>を参照していただくことを強くオススメします。</p>

<p>とりあえずここでは、Personalエディションを選択します。</p>

<h2 id="インストール手順">インストール手順</h2>

<p>Unityは基本的に直接インストーラーをダウンロードせず、Unity Hubと呼ばれるソフトを経由してインストールします。まずはそのUnity Hubをインストールするところから。</p>

<h3 id="unity-hubのダウンロード">Unity Hubのダウンロード</h3>

<p><a href="https://unity.com/">Unityオフィシャル</a>から「はじめる」をクリックします。</p>

<p><img src="2019-07-07-16-53-46.png" alt="pic" /></p>

<p>プランが表示されます。ここではPersonalを選択します。</p>

<p><img src="2019-07-07-17-42-45.png" alt="pic" /></p>

<p>「利用規約および〜」の部分にチェックを入れると、ボタンが活性化されてUnity Hubのダウンロードができるようになります。</p>

<p><img src="2019-07-07-16-56-51.png" alt="pic" /></p>

<p>ダウンロードしたらインストールします。MacへのインストールはApplicationsのフォルダーにコピーするだけです。</p>

<h3 id="ダウンロードするunityの選択">ダウンロードするUnityの選択</h3>

<p>Unity Hubのインストールが終わったら、起動します。</p>

<p><img src="2019-07-07-16-59-36.png" alt="pic" /></p>

<p>この状態ではまだUnity本体はインストールされていません。ダウンロードもされていません。そこで、左の「インストール」をクリックします。</p>

<p><img src="2019-07-07-17-00-45.png" alt="pic" /></p>

<p>右上の「インストール」ボタンをクリックします。すると現時点（2019年7月）でインストールが可能なバージョンの一覧が表示されます。</p>

<p><img src="2019-07-07-17-01-32.png" alt="pic" /></p>

<p>とくにこだわりがなければ最新の安定版をインストールします。</p>

<h3 id="一緒にインストールするモジュールの選択">一緒にインストールするモジュールの選択</h3>

<p>本体のバージョンを選択し「次へ」をクリックすると、今度は本体と同時にインストールするモジュールを選択できます。自分は「Android Build Support」「iOS Build Support」の2つを選択しました。とくに深い意味はありません。なんとなく必要になりそうだな・・・と思ったので。なお、Dev toolsのVisual Studio for Macは最初から選択されています。</p>

<p>なお、ここで選択しなくても後で追加できるので、必要性を感じなければ選択しなくても何ら問題ありません。</p>

<p>選択し終わったら「次へ」をクリック。</p>

<p><img src="2019-07-07-17-06-08.png" alt="pic" /></p>

<h3 id="ライセンス契約">ライセンス契約</h3>

<p>ライセンス契約の画面です。おもむろに同意します。そして「実行」をクリックします。</p>

<p><img src="2019-07-07-17-06-55.png" alt="pic" /></p>

<p>すると、自動的にダウンロードが始まります。</p>

<p><img src="2019-07-07-17-08-06.png" alt="pic" /></p>

<p>しばらく放置しておけばダウンロードとインストールが完了します。</p>

<p><img src="2019-07-07-17-41-01.png" alt="pic" /></p>

<h3 id="インストールが終わったら">インストールが終わったら</h3>

<p>左側の「プロジェクト」から「新規作成」をクリックします。</p>

<p><img src="2019-07-07-17-45-00.png" alt="pic" /></p>

<p>するとテンプレート画面が開きます。ここから新規作成すればいいわけですね。</p>

<p><img src="2019-07-07-17-45-17.png" alt="pic" /></p>

<h2 id="まとめ">まとめ</h2>

<p>Unityのインストールがこれで完了しました。なお、アップデートなどもUnity Hubを利用することになります。</p>

<p>さあ、あとはコーディングするだけです。するだけです。するだけだってば。</p>
]]></content>
		</item>
		
		<item>
			<title>Visual Studio CodeでGitが見つからないと言われたら</title>
			<link>https://idontwannawork.github.io/posts/fix-git-path-with-vscode/</link>
			<pubDate>Sun, 07 Jul 2019 17:14:15 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/fix-git-path-with-vscode/</guid>
			<description>VS Codeをアップデートしたらこんなメッセージが Visual Studio Code(以下、VS Code)をアップデートしたらこんな通知が出るようになりました。 「G</description>
			<content type="html"><![CDATA[

<h2 id="vs-codeをアップデートしたらこんなメッセージが">VS Codeをアップデートしたらこんなメッセージが</h2>

<p>Visual Studio Code(以下、VS Code)をアップデートしたらこんな通知が出るようになりました。</p>

<p><img src="2019-07-07-17-14-40.png" alt="pic" /></p>

<p>「Gitが見つからないよ！」って・・・いや、君今までしこたまGit使ってたじゃないか。</p>

<p>理由はともかく、このままではGitの各種コマンドが利用できないので、設定します。</p>

<h2 id="環境">環境</h2>

<ul>
<li>macOS Mojave 10.14.5</li>
<li>Visual Studio Code version 1.36</li>
</ul>

<h2 id="設定手順">設定手順</h2>

<ol>
<li><p>左下の歯車マークから、あるいは<code>Command + ,</code>で「Settings」画面を表示します。</p>

<p><img src="2019-07-07-17-20-20.png" alt="pic" /></p></li>

<li><p>出てきた画面に「git.path」と入力します。すると、「Settings.jsonで設定してね」と言われるのでSettings.jsonを開きます。</p>

<p><img src="2019-07-07-17-25-35.png" alt="pic" /></p>

<p>ごちゃごちゃしてますが、下のところに<code>&quot;git.path&quot;: &quot;/usr/bin&quot;</code>を追記しました。なお、gitのパスはコンソール画面にて<code>which git</code>すればわかります。</p></li>

<li><p>編集が終わったら保存します。これで完了です。なお、いつのバージョン以降からかは失念しましたが、設定の変更を行ってもVS Codeを再起動する必要はなく即時反映されます。</p></li>
</ol>

<h2 id="番外編-xcodeをインストールしたらなぜかgitが使えないぞ">（番外編）XcodeをインストールしたらなぜかGitが使えないぞ</h2>

<p>XcodeをインストールしたらGitが使えなくなりました。なんかライセンス契約に同意する必要があるみたいです。</p>

<p>指示に従いコマンド発行および同意を行ったら、Gitが再び利用できるようになりました。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ git --version

Agreeing to the Xcode/iOS license requires admin privileges, please run “sudo xcodebuild -license” and <span class="k">then</span> retry this command.

$ sudo xcodebuild -license

You have not agreed to the Xcode license agreements. You must agree to both license agreements below in order to use Xcode.

（中略）

“Apple Developer Program License Agreement” means a separate agreement that may be entered into between You and Apple regarding the development and su

By typing <span class="s1">&#39;agree&#39;</span> you are agreeing to the terms of the software license agreements. Type <span class="s1">&#39;print&#39;</span> to print them or anything <span class="k">else</span> to cancel, <span class="o">[</span>agree, print, cancel<span class="o">]</span> agree

You can view the license agreements in Xcode<span class="err">&#39;</span>s About Box, or at /Applications/Xcode.app/Contents/Resources/English.lproj/License.rtf

$ git --version
git version <span class="m">2</span>.20.1 <span class="o">(</span>Apple Git-117<span class="o">)</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>DockerでVue.jsの開発環境を構築する</title>
			<link>https://idontwannawork.github.io/posts/build-environment-of-vuejs-with-docker/</link>
			<pubDate>Thu, 04 Jul 2019 13:58:10 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/build-environment-of-vuejs-with-docker/</guid>
			<description>概要 フロントの勉強としてVue.jsの開発環境を整備するときに、せっかくなのでDockerを使って環境を構築してみました。 環境 macOS Mojave 10.14.5 Docker version 18.09.2 Visual</description>
			<content type="html"><![CDATA[

<h2 id="概要">概要</h2>

<p>フロントの勉強としてVue.jsの開発環境を整備するときに、せっかくなのでDockerを使って環境を構築してみました。</p>

<h2 id="環境">環境</h2>

<ul>
<li>macOS Mojave 10.14.5</li>
<li>Docker version 18.09.2</li>
<li>Visual Studio Code version 1.35</li>
</ul>

<h2 id="手順">手順</h2>

<p>今回は勉強がてらdocker-composeを利用します。とは言っても「書くよ！」ってだけで複雑なことは全然やってないです。</p>

<h3 id="dockerfileの作成">Dockerfileの作成</h3>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">FROM</span><span class="s"> node:lts-alpine</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk update <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>    npm install -g npm @vue/cli</code></pre></div>
<p>ただし、現時点（2019年7月3日）でVisual Studio CodeのRemoteはAlpine Linuxに対応していないので、Remoteを利用したい場合は別のイメージを使った方がいいと思われます（1敗）。<a href="/posts/connect-to-docker-with-vscode-extension/">以前記事にしていた</a>ので「Vue.jsの環境もリモートで開発だぁ！」とか思ってたんですけど出鼻をくじかれました。</p>

<p>なお、Alpine Linuxは<a href="https://github.com/microsoft/vscode-remote-release/issues/54">VS Code Insidersではサポートされている</a>ため、そのうち正式対応するはずなので正座して待機しようと思います。</p>

<h3 id="docker-compose-ymlの作成">docker-compose.ymlの作成</h3>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile">version: <span class="s1">&#39;3&#39;</span><span class="err">
</span><span class="err"></span>services:<span class="err">
</span><span class="err"></span>  vue_app:<span class="err">
</span><span class="err"></span>    build: .<span class="err">
</span><span class="err"></span>    ports:<span class="err">
</span><span class="err"></span>      - <span class="m">1234</span>:8080<span class="err">
</span><span class="err"></span>    volumes:<span class="err">
</span><span class="err"></span>      - .:/app<span class="err">
</span><span class="err"></span>    stdin_open: true<span class="err">
</span><span class="err"></span>    tty: true<span class="err">
</span><span class="err"></span>    command: /bin/sh</code></pre></div>
<h3 id="コンテナーのビルド">コンテナーのビルド</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker-compose build</code></pre></div>
<h3 id="コンテナーの起動">コンテナーの起動</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker-compose up -d</code></pre></div>
<p><code>docker ps</code>コマンドを叩くとコンテナーが起動しているはず。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
9fcc61e05285        dockapp_vue_app     <span class="s2">&#34;docker-entrypoint.s…&#34;</span>   <span class="m">2</span> minutes ago       Up <span class="m">2</span> minutes        <span class="m">0</span>.0.0.0:9000-&gt;9000/tcp   dockapp_vue_app_1</code></pre></div>
<h3 id="コンテナーに入る">コンテナーに入る</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> vue_app sh</code></pre></div>
<h3 id="vueプロジェクトの作成">vueプロジェクトの作成</h3>

<p>コンテナーに入るとプロンプトが変わるので、<code>vue</code>コマンドを叩いてプロジェクトを作成します。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vue create vue_app</code></pre></div>
<p>3系のvue cliをインストールしているので<code>create</code>を利用します（2.x系だと<code>init webpack hoge</code>だった）。とくにこだわりがなければエンターを連打。しばらくすると・・・</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">  Successfully created project vue_app.
  Get started with the following commands:

 $ <span class="nb">cd</span> vue_app
 $ npm run serve</code></pre></div>
<p>となり、準備完了です。</p>

<h3 id="vueプロジェクトの起動とアクセス">vueプロジェクトの起動とアクセス</h3>

<p>コンテナー上でフォルダを移動して<code>npm run</code>します。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> vue_app
npm run serve</code></pre></div>
<p>正常に起動したら<code>http://localhost:1234/</code>にアクセスする。</p>

<p><img src="pic1.jpg" alt="pic" /></p>

<p>上記のようなページが表示されたら環境構築は完了です。</p>

<h2 id="まとめ">まとめ</h2>

<p>Pythonに引き続き、Vue.jsもDockerで環境構築してみましたが、ローカルを汚さない・いざとなったら潰して新しく作ればいいってのはホントに気軽でいいですね。あとはコーディングするだけです（血涙</p>
]]></content>
		</item>
		
		<item>
			<title>なんでJavaの記事って少ないの？</title>
			<link>https://idontwannawork.github.io/posts/why-are-there-few-articles-of-java/</link>
			<pubDate>Sun, 30 Jun 2019 16:40:00 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/why-are-there-few-articles-of-java/</guid>
			<description>はじめに とある事情でJavaとJavaEE（今はJakartaEEか）を使用しないといけなくなってしまって、それはそれはさんざんな目にあった</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p>とある事情でJavaとJavaEE（今はJakartaEEか）を使用しないといけなくなってしまって、それはそれはさんざんな目にあった（あっている）。</p>

<p>そんな中で気づいたのだが、<strong>Javaって記事少なくない？</strong>ということ。</p>

<h2 id="どういうこと">どういうこと？</h2>

<p>JavaはブログのエントリーでもQiitaの記事でも、とにかく知名度の割りに数が少ない。検索してもエラい昔のエントリーがしれっと上位に表示される始末で、ホントに苦労した（している）。とくにJavaEEに関して言うと、例のEclipseへ移管されるニュースの方が検索上位に来てしまい、知りたい情報が埋没する。JSFについて調べたいなーと思ったら<a href="https://www.google.com/search?q=jsf&amp;ie=UTF-8">2013年の記事が検索上位にしれっと</a>紛れ込んできた。</p>

<p><a href="https://www.codingdojo.com/blog/the-7-most-in-demand-programming-languages-of-2019">仕事の多いプログラミング言語の1位はJava</a>だそうだ。これはここ最近いきなり増加したわけじゃなく、何年も昔から同じ傾向だった。むしろ、Androidの開発はKotlinが普及する前はJavaで行われていたのだから、当然の結果と言える。それでもこの結果。</p>

<p>どういうことだ。Javaに関する記事書いたら、黒服の男たちに記事ごと投稿者も消されるジンクスでもあるのか。東方算法騎士団もびっくりだぞ。</p>

<h2 id="記事数を調べる">記事数を調べる</h2>

<h3 id="qiita">Qiita</h3>

<p>Qiitaでタグ検索すると、それぞれ下記のような結果になった。なお調べたのは2019年6月13日なので、下記の記事数はその時点でのものだ。</p>

<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">記事数</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">Java</td>
<td align="center"><a href="https://qiita.com/tags/java">12022記事</a></td>
</tr>

<tr>
<td align="center">Python</td>
<td align="center"><a href="https://qiita.com/tags/python">28170記事</a></td>
</tr>

<tr>
<td align="center">JavaScript</td>
<td align="center"><a href="https://qiita.com/tags/javascript">26033記事</a></td>
</tr>

<tr>
<td align="center">Ruby</td>
<td align="center"><a href="https://qiita.com/tags/ruby">21669記事</a></td>
</tr>

<tr>
<td align="center">PHP</td>
<td align="center"><a href="https://qiita.com/tags/php">15987記事</a></td>
</tr>

<tr>
<td align="center">Go</td>
<td align="center"><a href="https://qiita.com/tags/go">6035記事</a></td>
</tr>

<tr>
<td align="center">golang</td>
<td align="center"><a href="https://qiita.com/tags/golang">2899記事</a></td>
</tr>

<tr>
<td align="center">C#</td>
<td align="center"><a href="https://qiita.com/tags/csharp">7342記事</a></td>
</tr>
</tbody>
</table>

<p>順不同。Goとgolangで別タグになっているのはちょっとよくわからない。</p>

<p>ちなみに<a href="https://qiita.com/tags/javaee">JavaEEに至ってはたった217記事</a>だ。</p>

<p>あくまでタグでの検索結果なのでノイズがそこそこあると思う。それでもPythonの突出具合はスゴい・・・のではなく、Javaの記事数が少ないのだ。Python（1991年発表）はJavaの先輩だが、RubyやPHPはほぼ同期（1995年発表）だ。なのにこの差。Python、JavaScriptにはダブルスコア以上の差がある。Rubyとも、ダブルスコアまで行かなくても、1.8倍だ。だいぶ後輩のGo（golang）やC#はさすがにJavaに及ばなかったが、もう数年頑張れば記事数も逆転できるんじゃない？というくらいの差だ。</p>

<p>やっぱり少なくないか？Java。</p>

<h3 id="stackoverflow">stackoverflow</h3>

<p>stackoverflowでも各言語でタグ検索してみた。</p>

<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">記事数</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">Java</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/java">1556934</a></td>
</tr>

<tr>
<td align="center">Python</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/python">1187632</a></td>
</tr>

<tr>
<td align="center">JavaScript</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/javascript">1823840</a></td>
</tr>

<tr>
<td align="center">Ruby</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/ruby">205187</a></td>
</tr>

<tr>
<td align="center">PHP</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/php">1289292</a></td>
</tr>

<tr>
<td align="center">Go</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/go">38620</a></td>
</tr>

<tr>
<td align="center">C#</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/c%23">1319866</a></td>
</tr>
</tbody>
</table>

<p>こちらではJavaとPythonが逆転しているが、言うほどの極端な差はない。C#の質問数が結構多いのが気になる。</p>

<p>Qiitaでの結果と同様にあくまでタグでの検索結果なので、完全に精緻ではないがJava・JavaScript・C#が頭一つ抜きん出ている感じ。それでもJavaはJavaScriptに質問数で負けている。</p>

<p>やっぱり少なくないか？Java。</p>

<h2 id="google">Google</h2>

<p>Googleでの検索結果はそりゃもうめちゃくちゃ多くヒットするが、プログラミング言語以外の「Java」も引っかかってくるためヒット数の調査はしなかった。</p>

<p>ただし、体感として「あー、これわからないなー」っていうときに調べて、パッと答えが出てくるのはPythonやJavaScriptが多い気がする（個人の感想なのであまり保障はできないが）。Javaは調べて一応解決するが、その元ネタがブログとかでなくどっかのホスティングサイトで、しかも歴史を感じさせるHTMLだったのは特筆すべきこと・・・なんだろうか。</p>

<h2 id="qrunch">Qrunch</h2>

<p>まだサービスが比較的生まれたばかりなので記事数を出すのは不平等かな、とは思うがやっぱりQrunchでも同様の結果だった。Java、少ない・・・。</p>

<h2 id="考察-してもしょうがない">考察（してもしょうがない）</h2>

<p><strong>さっぱりわからない</strong>。</p>

<p>案件数が多く、現在Javaで動いているシステムもあり、モバイルアプリケーションもガラケーのころからJavaでの実装が多かった。それでこの記事数？って感じ。</p>

<p>社内規定上、たとえ一部だったとしてもJavaのソースコードを外部に晒すことができなかったとか、そういう理由でもないと納得できないのだ。いくら大昔にブログやTwitterはなかっただろ？と言われても、PythonやPHPがゴリゴリ記事を書かれているに、Javaがそうならない理由がよくわからない。</p>

<p>初心者向けじゃないのかな？と一瞬考えた。だが、よく「初心者向けな言語は？」みたいなページでは、いろんな理由でPythonを薦めてりするがJavaだって同様に推されている。機械学習したいからPythonの記事が多いのかなとも思ったが、さすがにプログラミングを始めるみんなが機械学習に興味があるとも思えない（ゲームだとUnityあたりとかなんだろうけど）。むしろ軽くバブルっぽかったモバイルアプリケーションは長らく主流がJavaだったのだから、少なくともこんなに体感的に少なく感じることはないはずなのだが。Javaを書く人たちはアウトプット志向ではない、とでも言うのか。</p>

<h2 id="まとめ-まとまってない">まとめ（まとまってない）</h2>

<p>記事が多ければいい、というわけではもちろんない。記事が多ければ、相対的にノイズも多くなるだろうし間違った記事も多くなるだろう。それでも、記事が多くなれば相対的に正解もまた多くなる。同じことを言っている記事がたくさんあるなら、それは正解なのだと判断できるようになる。</p>

<p>そういう現状のを見るに、Javaには記事を書かないor書かせない力でも働いてるのだろうか？と思ってしまう。</p>

<p>それとも「わざわざ記事にしなくても、Javaなんか一目見てわかるだろ言わせんな恥ずかしい」ってことなんだろうか。</p>

<h2 id="つらい">つらい</h2>

<p>つらい。</p>
]]></content>
		</item>
		
	</channel>
</rss>
