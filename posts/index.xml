<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Come as you are</title>
		<link>https://idontwannawork.github.io/posts/</link>
		<description>Recent content in Posts on Come as you are</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja</language>
		<lastBuildDate>Thu, 11 Jul 2019 16:41:00 +0900</lastBuildDate>
		<atom:link href="https://idontwannawork.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Unity Hubを使ってUnityをインストールする</title>
			<link>https://idontwannawork.github.io/posts/install-unity-with-unity-hub/</link>
			<pubDate>Thu, 11 Jul 2019 16:41:00 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/install-unity-with-unity-hub/</guid>
			<description>Unityって何さ Unity 世界で最も広くつかわれているゲーム開発エンジン。 様々な機能を備えたエディターと、業界で最も幅広いプラットフォームへのサポ</description>
			<content type="html"><![CDATA[

<h2 id="unityって何さ">Unityって何さ</h2>

<p><a href="https://unity.com/">Unity</a></p>

<blockquote>
<p>世界で最も広くつかわれているゲーム開発エンジン。 様々な機能を備えたエディターと、業界で最も幅広いプラットフォームへのサポートを利用して、ゲームやインタラクティブなコンテンツを制作する方法を学びましょう。</p>
</blockquote>

<p>「ゲーム開発エンジン」とは、画面描写、効果音やBGMなどの音楽管理、ステータスなどの各種データ管理などを総合して開発できる環境のこと。ただ、昨今ではゲームだけでなく映像制作にも用いられてますし、3Dに強いという特徴を生かして建築設計にも活用されているようです。すげぇ。</p>

<p>2Dを多用した映像制作ではちょっとアレかもしれませんが、3Dがメインならリアルタイムで3Dレンダリングが可能なUnityの強みを活用できそうです。<a href="https://unity.com/">Unityオフィシャル</a>を始めとしてナレッジも多いですし、販売されているテキストも充実しているのも、Unityの強みかもしれません。</p>

<p>何はともあれ、まずは環境を整備しようと思います。今回はインストールについて。</p>

<h2 id="環境">環境</h2>

<ul>
<li>macOS Mojave 10.14.5</li>
</ul>

<p>なお、インストールする対象は<a href="https://blogs.unity3d.com/jp/2019/04/16/introducing-unity-2019-1/">Unity 2019.1版</a>とします。</p>

<h2 id="エディション">エディション</h2>

<p>Unityには現在（2019年7月10日）エディションが3パターン存在します。</p>

<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">月額</th>
<th align="center">条件</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">Personal</td>
<td align="center">無料</td>
<td align="center">収入ならびに資金調達（自己資金を含む）の合計が年間10万ドルを超えない場合</td>
</tr>

<tr>
<td align="center">Pro with Teams Advanced</td>
<td align="center">15,000円</td>
<td align="center">条件なし</td>
</tr>

<tr>
<td align="center">Plus</td>
<td align="center">～3000円</td>
<td align="center">個人・法人問わず、年間収益ならびに資金調達（自己資金を含む）の合計が20万米ドル以下の場合</td>
</tr>
</tbody>
</table>

<p>エディション構成あるいは月額は、ある程度のスパンで更新されると思うので、<a href="https://unity.com/">Unityオフィシャル</a>を参照していただくことを強くオススメします。</p>

<p>とりあえずここでは、Personalエディションを選択します。</p>

<h2 id="インストール手順">インストール手順</h2>

<p>Unityは基本的に直接インストーラーをダウンロードせず、Unity Hubと呼ばれるソフトを経由してインストールします。まずはそのUnity Hubをインストールするところから。</p>

<h3 id="unity-hubのダウンロード">Unity Hubのダウンロード</h3>

<p><a href="https://unity.com/">Unityオフィシャル</a>から「はじめる」をクリックします。</p>

<p><img src="2019-07-07-16-53-46.png" alt="pic" /></p>

<p>プランが表示されます。ここではPersonalを選択します。</p>

<p><img src="2019-07-07-17-42-45.png" alt="pic" /></p>

<p>「利用規約および〜」の部分にチェックを入れると、ボタンが活性化されてUnity Hubのダウンロードができるようになります。</p>

<p><img src="2019-07-07-16-56-51.png" alt="pic" /></p>

<p>ダウンロードしたらインストールします。MacへのインストールはApplicationsのフォルダーにコピーするだけです。</p>

<h3 id="ダウンロードするunityの選択">ダウンロードするUnityの選択</h3>

<p>Unity Hubのインストールが終わったら、起動します。</p>

<p><img src="2019-07-07-16-59-36.png" alt="pic" /></p>

<p>この状態ではまだUnity本体はインストールされていません。ダウンロードもされていません。そこで、左の「インストール」をクリックします。</p>

<p><img src="2019-07-07-17-00-45.png" alt="pic" /></p>

<p>右上の「インストール」ボタンをクリックします。すると現時点（2019年7月）でインストールが可能なバージョンの一覧が表示されます。</p>

<p><img src="2019-07-07-17-01-32.png" alt="pic" /></p>

<p>とくにこだわりがなければ最新の安定版をインストールします。</p>

<h3 id="一緒にインストールするモジュールの選択">一緒にインストールするモジュールの選択</h3>

<p>本体のバージョンを選択し「次へ」をクリックすると、今度は本体と同時にインストールするモジュールを選択できます。自分は「Android Build Support」「iOS Build Support」の2つを選択しました。とくに深い意味はありません。なんとなく必要になりそうだな・・・と思ったので。なお、Dev toolsのVisual Studio for Macは最初から選択されています。</p>

<p>なお、ここで選択しなくても後で追加できるので、必要性を感じなければ選択しなくても何ら問題ありません。</p>

<p>選択し終わったら「次へ」をクリック。</p>

<p><img src="2019-07-07-17-06-08.png" alt="pic" /></p>

<h3 id="ライセンス契約">ライセンス契約</h3>

<p>ライセンス契約の画面です。おもむろに同意します。そして「実行」をクリックします。</p>

<p><img src="2019-07-07-17-06-55.png" alt="pic" /></p>

<p>すると、自動的にダウンロードが始まります。</p>

<p><img src="2019-07-07-17-08-06.png" alt="pic" /></p>

<p>しばらく放置しておけばダウンロードとインストールが完了します。</p>

<p><img src="2019-07-07-17-41-01.png" alt="pic" /></p>

<h3 id="インストールが終わったら">インストールが終わったら</h3>

<p>左側の「プロジェクト」から「新規作成」をクリックします。</p>

<p><img src="2019-07-07-17-45-00.png" alt="pic" /></p>

<p>するとテンプレート画面が開きます。ここから新規作成すればいいわけですね。</p>

<p><img src="2019-07-07-17-45-17.png" alt="pic" /></p>

<h2 id="まとめ">まとめ</h2>

<p>Unityのインストールがこれで完了しました。なお、アップデートなどもUnity Hubを利用することになります。</p>

<p>さあ、あとはコーディングするだけです。するだけです。するだけだってば。</p>
]]></content>
		</item>
		
		<item>
			<title>Visual Studio CodeでGitが見つからないと言われたら</title>
			<link>https://idontwannawork.github.io/posts/fix-git-path-with-vscode/</link>
			<pubDate>Sun, 07 Jul 2019 17:14:15 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/fix-git-path-with-vscode/</guid>
			<description>VS Codeをアップデートしたらこんなメッセージが Visual Studio Code(以下、VS Code)をアップデートしたらこんな通知が出るようになりました。 「G</description>
			<content type="html"><![CDATA[

<h2 id="vs-codeをアップデートしたらこんなメッセージが">VS Codeをアップデートしたらこんなメッセージが</h2>

<p>Visual Studio Code(以下、VS Code)をアップデートしたらこんな通知が出るようになりました。</p>

<p><img src="2019-07-07-17-14-40.png" alt="pic" /></p>

<p>「Gitが見つからないよ！」って・・・いや、君今までしこたまGit使ってたじゃないか。</p>

<p>理由はともかく、このままではGitの各種コマンドが利用できないので、設定します。</p>

<h2 id="環境">環境</h2>

<ul>
<li>macOS Mojave 10.14.5</li>
<li>Visual Studio Code version 1.36</li>
</ul>

<h2 id="設定手順">設定手順</h2>

<ol>
<li><p>左下の歯車マークから、あるいは<code>Command + ,</code>で「Settings」画面を表示します。</p>

<p><img src="2019-07-07-17-20-20.png" alt="pic" /></p></li>

<li><p>出てきた画面に「git.path」と入力します。すると、「Settings.jsonで設定してね」と言われるのでSettings.jsonを開きます。</p>

<p><img src="2019-07-07-17-25-35.png" alt="pic" /></p>

<p>ごちゃごちゃしてますが、下のところに<code>&quot;git.path&quot;: &quot;/usr/bin&quot;</code>を追記しました。なお、gitのパスはコンソール画面にて<code>which git</code>すればわかります。</p></li>

<li><p>編集が終わったら保存します。これで完了です。なお、いつのバージョン以降からかは失念しましたが、設定の変更を行ってもVS Codeを再起動する必要はなく即時反映されます。</p></li>
</ol>

<h2 id="番外編-xcodeをインストールしたらなぜかgitが使えないぞ">（番外編）XcodeをインストールしたらなぜかGitが使えないぞ</h2>

<p>XcodeをインストールしたらGitが使えなくなりました。なんかライセンス契約に同意する必要があるみたいです。</p>

<p>指示に従いコマンド発行および同意を行ったら、Gitが再び利用できるようになりました。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ git --version

Agreeing to the Xcode/iOS license requires admin privileges, please run “sudo xcodebuild -license” and <span class="k">then</span> retry this command.

$ sudo xcodebuild -license

You have not agreed to the Xcode license agreements. You must agree to both license agreements below in order to use Xcode.

（中略）

“Apple Developer Program License Agreement” means a separate agreement that may be entered into between You and Apple regarding the development and su

By typing <span class="s1">&#39;agree&#39;</span> you are agreeing to the terms of the software license agreements. Type <span class="s1">&#39;print&#39;</span> to print them or anything <span class="k">else</span> to cancel, <span class="o">[</span>agree, print, cancel<span class="o">]</span> agree

You can view the license agreements in Xcode<span class="err">&#39;</span>s About Box, or at /Applications/Xcode.app/Contents/Resources/English.lproj/License.rtf

$ git --version
git version <span class="m">2</span>.20.1 <span class="o">(</span>Apple Git-117<span class="o">)</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>DockerでVue.jsの開発環境を構築する</title>
			<link>https://idontwannawork.github.io/posts/build-environment-of-vuejs-with-docker/</link>
			<pubDate>Thu, 04 Jul 2019 13:58:10 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/build-environment-of-vuejs-with-docker/</guid>
			<description>概要 フロントの勉強としてVue.jsの開発環境を整備するときに、せっかくなのでDockerを使って環境を構築してみました。 環境 macOS Mojave 10.14.5 Docker version 18.09.2 Visual</description>
			<content type="html"><![CDATA[

<h2 id="概要">概要</h2>

<p>フロントの勉強としてVue.jsの開発環境を整備するときに、せっかくなのでDockerを使って環境を構築してみました。</p>

<h2 id="環境">環境</h2>

<ul>
<li>macOS Mojave 10.14.5</li>
<li>Docker version 18.09.2</li>
<li>Visual Studio Code version 1.35</li>
</ul>

<h2 id="手順">手順</h2>

<p>今回は勉強がてらdocker-composeを利用します。とは言っても「書くよ！」ってだけで複雑なことは全然やってないです。</p>

<h3 id="dockerfileの作成">Dockerfileの作成</h3>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">FROM</span><span class="s"> node:lts-alpine</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apk update <span class="o">&amp;&amp;</span> <span class="se">\
</span><span class="se"></span>    npm install -g npm @vue/cli</code></pre></div>
<p>ただし、現時点（2019年7月3日）でVisual Studio CodeのRemoteはAlpine Linuxに対応していないので、Remoteを利用したい場合は別のイメージを使った方がいいと思われます（1敗）。<a href="/posts/connect-to-docker-with-vscode-extension/">以前記事にしていた</a>ので「Vue.jsの環境もリモートで開発だぁ！」とか思ってたんですけど出鼻をくじかれました。</p>

<p>なお、Alpine Linuxは<a href="https://github.com/microsoft/vscode-remote-release/issues/54">VS Code Insidersではサポートされている</a>ため、そのうち正式対応するはずなので正座して待機しようと思います。</p>

<h3 id="docker-compose-ymlの作成">docker-compose.ymlの作成</h3>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile">version: <span class="s1">&#39;3&#39;</span><span class="err">
</span><span class="err"></span>services:<span class="err">
</span><span class="err"></span>  vue_app:<span class="err">
</span><span class="err"></span>    build: .<span class="err">
</span><span class="err"></span>    ports:<span class="err">
</span><span class="err"></span>      - <span class="m">1234</span>:8080<span class="err">
</span><span class="err"></span>    volumes:<span class="err">
</span><span class="err"></span>      - .:/app<span class="err">
</span><span class="err"></span>    stdin_open: true<span class="err">
</span><span class="err"></span>    tty: true<span class="err">
</span><span class="err"></span>    command: /bin/sh</code></pre></div>
<h3 id="コンテナーのビルド">コンテナーのビルド</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker-compose build</code></pre></div>
<h3 id="コンテナーの起動">コンテナーの起動</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker-compose up -d</code></pre></div>
<p><code>docker ps</code>コマンドを叩くとコンテナーが起動しているはず。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
9fcc61e05285        dockapp_vue_app     <span class="s2">&#34;docker-entrypoint.s…&#34;</span>   <span class="m">2</span> minutes ago       Up <span class="m">2</span> minutes        <span class="m">0</span>.0.0.0:9000-&gt;9000/tcp   dockapp_vue_app_1</code></pre></div>
<h3 id="コンテナーに入る">コンテナーに入る</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> vue_app sh</code></pre></div>
<h3 id="vueプロジェクトの作成">vueプロジェクトの作成</h3>

<p>コンテナーに入るとプロンプトが変わるので、<code>vue</code>コマンドを叩いてプロジェクトを作成します。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">vue create vue_app</code></pre></div>
<p>3系のvue cliをインストールしているので<code>create</code>を利用します（2.x系だと<code>init webpack hoge</code>だった）。とくにこだわりがなければエンターを連打。しばらくすると・・・</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">  Successfully created project vue_app.
  Get started with the following commands:

 $ <span class="nb">cd</span> vue_app
 $ npm run serve</code></pre></div>
<p>となり、準備完了です。</p>

<h3 id="vueプロジェクトの起動とアクセス">vueプロジェクトの起動とアクセス</h3>

<p>コンテナー上でフォルダを移動して<code>npm run</code>します。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">cd</span> vue_app
npm run serve</code></pre></div>
<p>正常に起動したら<code>http://localhost:1234/</code>にアクセスする。</p>

<p><img src="pic1.jpg" alt="pic" /></p>

<p>上記のようなページが表示されたら環境構築は完了です。</p>

<h2 id="まとめ">まとめ</h2>

<p>Pythonに引き続き、Vue.jsもDockerで環境構築してみましたが、ローカルを汚さない・いざとなったら潰して新しく作ればいいってのはホントに気軽でいいですね。あとはコーディングするだけです（血涙</p>
]]></content>
		</item>
		
		<item>
			<title>なんでJavaの記事って少ないの？</title>
			<link>https://idontwannawork.github.io/posts/why-are-there-few-articles-of-java/</link>
			<pubDate>Sun, 30 Jun 2019 16:40:00 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/why-are-there-few-articles-of-java/</guid>
			<description>はじめに とある事情でJavaとJavaEE（今はJakartaEEか）を使用しないといけなくなってしまって、それはそれはさんざんな目にあった</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p>とある事情でJavaとJavaEE（今はJakartaEEか）を使用しないといけなくなってしまって、それはそれはさんざんな目にあった（あっている）。</p>

<p>そんな中で気づいたのだが、<strong>Javaって記事少なくない？</strong>ということ。</p>

<h2 id="どういうこと">どういうこと？</h2>

<p>JavaはブログのエントリーでもQiitaの記事でも、とにかく知名度の割りに数が少ない。検索してもエラい昔のエントリーがしれっと上位に表示される始末で、ホントに苦労した（している）。とくにJavaEEに関して言うと、例のEclipseへ移管されるニュースの方が検索上位に来てしまい、知りたい情報が埋没する。JSFについて調べたいなーと思ったら<a href="https://www.google.com/search?q=jsf&amp;ie=UTF-8">2013年の記事が検索上位にしれっと</a>紛れ込んできた。</p>

<p><a href="https://www.codingdojo.com/blog/the-7-most-in-demand-programming-languages-of-2019">仕事の多いプログラミング言語の1位はJava</a>だそうだ。これはここ最近いきなり増加したわけじゃなく、何年も昔から同じ傾向だった。むしろ、Androidの開発はKotlinが普及する前はJavaで行われていたのだから、当然の結果と言える。それでもこの結果。</p>

<p>どういうことだ。Javaに関する記事書いたら、黒服の男たちに記事ごと投稿者も消されるジンクスでもあるのか。東方算法騎士団もびっくりだぞ。</p>

<h2 id="記事数を調べる">記事数を調べる</h2>

<h3 id="qiita">Qiita</h3>

<p>Qiitaでタグ検索すると、それぞれ下記のような結果になった。なお調べたのは2019年6月13日なので、下記の記事数はその時点でのものだ。</p>

<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">記事数</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">Java</td>
<td align="center"><a href="https://qiita.com/tags/java">12022記事</a></td>
</tr>

<tr>
<td align="center">Python</td>
<td align="center"><a href="https://qiita.com/tags/python">28170記事</a></td>
</tr>

<tr>
<td align="center">JavaScript</td>
<td align="center"><a href="https://qiita.com/tags/javascript">26033記事</a></td>
</tr>

<tr>
<td align="center">Ruby</td>
<td align="center"><a href="https://qiita.com/tags/ruby">21669記事</a></td>
</tr>

<tr>
<td align="center">PHP</td>
<td align="center"><a href="https://qiita.com/tags/php">15987記事</a></td>
</tr>

<tr>
<td align="center">Go</td>
<td align="center"><a href="https://qiita.com/tags/go">6035記事</a></td>
</tr>

<tr>
<td align="center">golang</td>
<td align="center"><a href="https://qiita.com/tags/golang">2899記事</a></td>
</tr>

<tr>
<td align="center">C#</td>
<td align="center"><a href="https://qiita.com/tags/csharp">7342記事</a></td>
</tr>
</tbody>
</table>

<p>順不同。Goとgolangで別タグになっているのはちょっとよくわからない。</p>

<p>ちなみに<a href="https://qiita.com/tags/javaee">JavaEEに至ってはたった217記事</a>だ。</p>

<p>あくまでタグでの検索結果なのでノイズがそこそこあると思う。それでもPythonの突出具合はスゴい・・・のではなく、Javaの記事数が少ないのだ。Python（1991年発表）はJavaの先輩だが、RubyやPHPはほぼ同期（1995年発表）だ。なのにこの差。Python、JavaScriptにはダブルスコア以上の差がある。Rubyとも、ダブルスコアまで行かなくても、1.8倍だ。だいぶ後輩のGo（golang）やC#はさすがにJavaに及ばなかったが、もう数年頑張れば記事数も逆転できるんじゃない？というくらいの差だ。</p>

<p>やっぱり少なくないか？Java。</p>

<h3 id="stackoverflow">stackoverflow</h3>

<p>stackoverflowでも各言語でタグ検索してみた。</p>

<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">記事数</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">Java</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/java">1556934</a></td>
</tr>

<tr>
<td align="center">Python</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/python">1187632</a></td>
</tr>

<tr>
<td align="center">JavaScript</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/javascript">1823840</a></td>
</tr>

<tr>
<td align="center">Ruby</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/ruby">205187</a></td>
</tr>

<tr>
<td align="center">PHP</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/php">1289292</a></td>
</tr>

<tr>
<td align="center">Go</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/go">38620</a></td>
</tr>

<tr>
<td align="center">C#</td>
<td align="center"><a href="https://stackoverflow.com/questions/tagged/c%23">1319866</a></td>
</tr>
</tbody>
</table>

<p>こちらではJavaとPythonが逆転しているが、言うほどの極端な差はない。C#の質問数が結構多いのが気になる。</p>

<p>Qiitaでの結果と同様にあくまでタグでの検索結果なので、完全に精緻ではないがJava・JavaScript・C#が頭一つ抜きん出ている感じ。それでもJavaはJavaScriptに質問数で負けている。</p>

<p>やっぱり少なくないか？Java。</p>

<h2 id="google">Google</h2>

<p>Googleでの検索結果はそりゃもうめちゃくちゃ多くヒットするが、プログラミング言語以外の「Java」も引っかかってくるためヒット数の調査はしなかった。</p>

<p>ただし、体感として「あー、これわからないなー」っていうときに調べて、パッと答えが出てくるのはPythonやJavaScriptが多い気がする（個人の感想なのであまり保障はできないが）。Javaは調べて一応解決するが、その元ネタがブログとかでなくどっかのホスティングサイトで、しかも歴史を感じさせるHTMLだったのは特筆すべきこと・・・なんだろうか。</p>

<h2 id="qrunch">Qrunch</h2>

<p>まだサービスが比較的生まれたばかりなので記事数を出すのは不平等かな、とは思うがやっぱりQrunchでも同様の結果だった。Java、少ない・・・。</p>

<h2 id="考察-してもしょうがない">考察（してもしょうがない）</h2>

<p><strong>さっぱりわからない</strong>。</p>

<p>案件数が多く、現在Javaで動いているシステムもあり、モバイルアプリケーションもガラケーのころからJavaでの実装が多かった。それでこの記事数？って感じ。</p>

<p>社内規定上、たとえ一部だったとしてもJavaのソースコードを外部に晒すことができなかったとか、そういう理由でもないと納得できないのだ。いくら大昔にブログやTwitterはなかっただろ？と言われても、PythonやPHPがゴリゴリ記事を書かれているに、Javaがそうならない理由がよくわからない。</p>

<p>初心者向けじゃないのかな？と一瞬考えた。だが、よく「初心者向けな言語は？」みたいなページでは、いろんな理由でPythonを薦めてりするがJavaだって同様に推されている。機械学習したいからPythonの記事が多いのかなとも思ったが、さすがにプログラミングを始めるみんなが機械学習に興味があるとも思えない（ゲームだとUnityあたりとかなんだろうけど）。むしろ軽くバブルっぽかったモバイルアプリケーションは長らく主流がJavaだったのだから、少なくともこんなに体感的に少なく感じることはないはずなのだが。Javaを書く人たちはアウトプット志向ではない、とでも言うのか。</p>

<h2 id="まとめ-まとまってない">まとめ（まとまってない）</h2>

<p>記事が多ければいい、というわけではもちろんない。記事が多ければ、相対的にノイズも多くなるだろうし間違った記事も多くなるだろう。それでも、記事が多くなれば相対的に正解もまた多くなる。同じことを言っている記事がたくさんあるなら、それは正解なのだと判断できるようになる。</p>

<p>そういう現状のを見るに、Javaには記事を書かないor書かせない力でも働いてるのだろうか？と思ってしまう。</p>

<p>それとも「わざわざ記事にしなくても、Javaなんか一目見てわかるだろ言わせんな恥ずかしい」ってことなんだろうか。</p>

<h2 id="つらい">つらい</h2>

<p>つらい。</p>
]]></content>
		</item>
		
		<item>
			<title>iPhone XRを購入して半年経った感想</title>
			<link>https://idontwannawork.github.io/posts/apple-iphone-xr-review/</link>
			<pubDate>Fri, 28 Jun 2019 10:18:44 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/apple-iphone-xr-review/</guid>
			<description>もともとiPhone 6Sだった iPhone XR（以下、XR）を購入する前はiPhone 6Sを使用していました。au版を中古で買ったのですがそのままau</description>
			<content type="html"><![CDATA[

<h2 id="もともとiphone-6sだった">もともとiPhone 6Sだった</h2>

<p>iPhone XR（以下、XR）を購入する前はiPhone 6Sを使用していました。au版を中古で買ったのですがそのままauショップへ持ち込みSIMロックを解除してもらって、SIMフリーとして使っていました。当時刺していたSIMはIIJのデータ通信用SIMだった・・・ような気がします（この頃はSIMカードをコロコロ変えていたものでちゃんと覚えてない・・・）。</p>

<p>ところが、iPhone 6Sの発売は2015年です。さすがに発売から数年も経過してくると、バッテリーのヘタりが目立つようになります。Googleマップのナビで長距離ドライブ、とハードに使用したわけでもないのに、1日を乗り切れないくらい持ちが悪くなってきました。遠出する場合は、もちろんモバイルバッテリー持参が必須。自転車に乗る際のナビ代わりに使用したら、それはもうアメ車のガソリンメーターのように、バッテリーがモリモリ減っていきます。ある意味、見ていておもしろいですが、使う分には恐ろしくてたまりません。</p>

<p>「<strong>あ、こりゃダメだ</strong>」</p>

<p>そう思っていたころでちょうどiPhone XSやXRが発表されました。これ幸いとばかりに、新機種の購入を検討し始めたわけです。</p>

<h2 id="なんでxrよ">なんでXRよ</h2>

<p><strong>一番の理由は値段・・・</strong>。</p>

<p>当初はXS購入の検討をしました。とはいえ、さすがは最上位機種であるXS。おいそれと購入できるような金額ではありません。いや、わかるんですよ、メチャクチャハイスペックなら値段も相応に高くなるっていうのは十分に理解できます。</p>

<p>でもね、XSってもうちょっとしたノートPC並みの値段してますよねぇ・・・。ノートPCなら、そこそこのスペックでもドキュメント書いたり軽めなプログラムを組めたりするわけですよ。そして、そういう長文が書けるにはやっぱりキーボードが必要なわけです。いくらスマホのスペックがすごいからって、わざわざ外部キーボード買ってまでスマホで文章書こうとは思わないし、まさかフリック入力で文章なんて書いたら腱鞘炎になりかねません。</p>

<p><strong>そして、XSとXRは同じチップセットを搭載しています</strong>。</p>

<p>もちろん細かい仕様ではXRはしっかりと廉価版という扱いですが、それでも頭脳であるチップセットは最上位機種A12 Bionicで、XSと同等であるわけです。その上で、XSと比べれば比較的手の届く金額。</p>

<p>「もうXRでいいんじゃね？」</p>

<p>この2点で、XRの購入を決定しました。</p>

<p><img src="IMG_0683.png" alt="pic" /></p>

<p>ラッキーだったことに、当時手元にMacBook Air（2011mid）や初代iPad miniがあったため、これらを<a href="https://www.apple.com/jp/trade-in/">Appleの下取りプログラム</a>に出してApple Storeのギフト券に換えて購入資金の一部にする（うろ覚えだけど、確か3万から4万くらいにはなったような気がする）ことで、多少安くXRを購入することができました。</p>

<p><img src="IMG_0682.png" alt="pic" /></p>

<p>ちなみに、XRのカラーは（PRODUCT）REDにしました。ケースは<a href="https://www.amazon.co.jp/%E3%80%90Spigen%E3%80%91-%E7%B1%B3%E8%BB%8DMIL%E8%A6%8F%E6%A0%BC%E5%8F%96%E5%BE%97-%E3%82%A6%E3%83%AB%E3%83%88%E3%83%A9%E3%83%BB%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89-064CS24873-%E3%82%AF%E3%83%AA%E3%82%B9%E3%82%BF%E3%83%AB%E3%83%BB%E3%82%AF%E3%83%AA%E3%82%A2/dp/B07GHMQDCJ/ref=sr_1_5?keywords=spigen+iphone+xr&amp;qid=1561786517&amp;s=gateway&amp;sr=8-5">Spigenのクリアケース</a>にしました。</p>

<h2 id="メリット">メリット</h2>

<p>以下のメリットは、<strong>iPhone 6Sと比較してのメリットです</strong>のでご了承ください。</p>

<ol>
<li><p>大画面ゆえの情報量</p>

<p>ホームボタンなしのデザインとなり、ほぼ全面で情報が見られる大画面は、一度慣れると戻れないですね。ベゼルはXSに比べると若干太いです。が、このあたりは後述したいと思います。</p>

<p>画面の上部にちょこっと出っ張っているノッチの好き嫌いはあるし、一部アプリはXシリーズの画面に対応してなかったりしますけど。</p></li>

<li><p>FaceIDが手軽で便利</p>

<p>iPhoneを取り出し、画面を見ればすぐに操作可能。TouchIDも登場から代を重ねるにつれ高速化していきましたが、「ホームボタンを触れる」アクションはどうしても必要だったわけです。それがFaceIDになることで、そのワンアクションすら必要ではなくなりました。</p>

<p>ただ、朝起きた直後の「起き抜けの顔」でFaceIDやると、必ず認証エラーになるのはなぜなんですかね・・・自分だけですかそうですか。</p></li>

<li><p>軽快なレスポンス</p>

<p>もともと、iPhoneとiOSでストレスを感じたことはあまりありませんが、XRでもレスポンスの良さは相変わらずです。むしろ端末本体のレスポンス云々より、回線の速度だったりサーバー側のレスポンスの方が気になるくらいです。あと、iMovieで動画ファイルを編集して書き出すときなどは、高パフォーマンスの恩恵に預かれると思います。</p>

<p>スマホで撮影しただけでは味気ないから、撮影した後にちょっとした動画編集をiMovieを使って行い、ムービーを書き出す。出力が終われば、ムービーはAirDropやAirPlayで共有する・・・なんてのも、全部iPhoneで完結できますし、さらにレスポンスよく作成できます。</p>

<p>YouTuber、とまでは行かなくとも子供やペットのムービーを撮って、ちょっと手間をかけて見栄え良くしたい。そんなときはiPhoneで全部できます。</p></li>

<li><p>長時間持つバッテリー</p>

<p>もともとの購入動機だったバッテリーですが、さすがです。動画再生だったりナビだったりで酷使してもしっかり1日持ちます。ライトな使い方をするなら、2日くらいでも十分持つんじゃないでしょうか。</p>

<p>機種変更してから、モバイルバッテリーの出番がすっかりなくなりました。</p></li>

<li><p>高性能カメラ</p>

<p>カメラはもう気軽にパシャパシャ撮るなら、もうデジカメを持ち出すまでもないですが、背景をボカしたポートレート撮影もソフトウェア処理で撮影できるようになりました。かなりきれいに背景がボケます。</p>

<p>ムービーもお馴染みのタイムラプス動画などをしっかり常備しています。</p>

<p>動画・静止画ともに手軽さとクオリティを両立させていて、ポイント高いです。</p></li>

<li><p>カラーバリエーションが豊富</p>

<p>派手な色いいよー_(┐「ε:)_</p></li>

<li><p>耐水性能と防塵性能</p>

<p>水深1メートルで最大30分間の耐水性能です。XS（水深2メートルで最大30分間の耐水性能）よりは少し弱いですが、それでも十分です。</p></li>
</ol>

<h2 id="デメリット">デメリット</h2>

<p>以下のデメリットは、メリットと同様に<strong>iPhone 6Sと比較してのメリットです</strong>のでご了承ください。</p>

<ol>
<li><p>デカい、厚い</p>

<p>iPhone6Sと比べるので、どうしても感じざるを得ません。「デカい」の大画面とほぼ同義語なので問題ないと言えばないのですが、厚いのはちょっとどうにもならないです。端末サイズのせいで、今まで利用していたスマホケースが軒並み利用できなくなりました。いやまぁ、サイズは理解した上で買ったのですが、ケースに入りそうでギリギリ入らなかったときの絶望感と来たら・・・。</p></li>

<li><p>コントロールパネルと通知センターの呼び出し方法が似すぎ</p>

<p>どちらも画面の上部から下方向にスワイプするのは共通しています。異なるのは右側で行うか、中央部分で行うか。</p></li>

<li><p>カメラが出っ張りすぎ</p>

<p>割と前からそうでしたが、カメラがどんどん出っ張ってます。ケースを着けないのであれば、机などにポンと置くとカメラのせいで必ず不安定です。カタカタ揺れるくらいにはバッチリ不安定です。こればっかりはいただけません。</p>

<p>結局、カメラの出っ張りをカバーできるような厚みのあるケースを購入しました。</p></li>

<li><p>ポートレートモードはまだ発展途上</p>

<p>「さっきポートレート撮影いいよ！って言ってたじゃん」と言われそうですが、すいません、手放しで喜べるほどではありません。</p>

<p>多分ポートレート撮影する対象って人物だと思うのです。ところがその人物をポートレートモードで撮影すると、後れ毛のような輪郭のはっきりしないものが背景と一緒にボケてしまうため、妙に輪郭がはっきりしたヘアスタイルに写ってしまいます。要は「不自然」なのです。</p>

<p>さらに、「ポートレートモード」というだけあって、<strong>人の顔が判定できないと撮影できません</strong>。なのでポートレートモードで静物は撮影できないし、ペットも撮影できません。この場合は通常の撮影モードになります。</p>

<p>一眼レフカメラなどだとボケ感がレンズと撮像素子（やフィルム）とのマッチングで処理されるのですが、XRの場合はソフトウェアが処理します。そのため、どうしてもソフト側の得手不得手が出てきてしまいます。このあたりは、ソフトウェアのアップデートでクオリティーが今後向上していくでしょう。</p>

<p>ただし、個人的にXRのシングルカメラはどうしてもデュアルカメラには敵わないし、一眼レフカメラなどの「専門機器」には敵わないだろうな、という感想です。</p>

<p>それをわかった上で、それぞれを使い分けるのが一番賢いと思います。</p></li>
</ol>

<h2 id="ちなみに">ちなみに</h2>

<p>以下の点は、自分には気にならなかった（デメリットではなかった）のですが、人によってはデメリットとなってしまう点かもしれません。</p>

<ul>
<li><p>イヤホンジャックなし</p>

<p>有線のイヤホンやヘッドホンを使用する人には、結構大きいデメリットじゃないでしょうか。</p>

<p>なお、自分はヘッドホンやイヤホンのコードが邪魔でキライなので、数年前からBluetoothのヘッドホンを使用しています。なので、ヘッドホンジャックなしでも特段困ることはありませんでした。最近ではAirPodのように左右のイヤホン間すらケーブルなしという機種も増えてきましたし、イヤホンジャックの非搭載は個人的に仕方のないことだと思っています。</p></li>

<li><p>スクリーンショット</p>

<p>XRでスクリーンショットを撮るには、サイドボタンと音量ボタンを同時に押します。端末の上部をつまむ感じです。慣れないとちょっと戸惑うかもしれません。</p></li>

<li><p>ベゼル幅</p>

<p>購入前に少し自分も気になっていた部分です。</p>

<p>XSと比較すると、XRのベゼル幅はやはり広いと言わざる得ません。また、国内外のハイスペックAndroid機でも薄いベゼルを実装した機種が発売されていますので、比べると気になると思います。</p>

<p>ただ、「比べると気になる」は「比べなければ気にならない」ので、実際のところ普段使いにはまったく影響ありませんでした。</p></li>

<li><p>3D touch</p>

<p>自分は残念ながら3D touchを有効活用できていなかったので、XRに非搭載でもあまり影響ありませんでした。</p></li>
</ul>

<h2 id="まとめ">まとめ</h2>

<p>XRは将来性を考慮すると<strong>妥当なスマホ</strong>です。</p>

<p>玉石混交のAndroidと比べると、iPhoneシリーズに割高感を感じるのは否定できません。ただ、OSのアップデートは比較的古い機種までサポートされるので、ハードの故障などがなければ購入から長く使えるのがiPhoneの利点です。またリセールバリューが高いことも利点でしょう。</p>

<p>あとこれは蛇足ですが、<a href="https://developer.apple.com/videos/play/wwdc2019/604">ARKit3</a>はA12 Bionic、あるはそれ以上のチップ搭載デバイスでしか動作しません。ということは、ARで最大限楽しむ場合での最安値はXRの一択です。</p>

<p>自分はこれを4年くらいは使い倒したいですが、はたして持つかどうか・・・。</p>
]]></content>
		</item>
		
		<item>
			<title>Korgのvolca modular買ったので軽くレビューしてみる</title>
			<link>https://idontwannawork.github.io/posts/korg-volca-modular-review/</link>
			<pubDate>Sun, 16 Jun 2019 00:30:23 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/korg-volca-modular-review/</guid>
			<description>買っちゃった volca modular、買っちゃったい。いやっほー_(:3」∠)_ volca modular？ volcaとは、KORGの生み出したシンセサイザー</description>
			<content type="html"><![CDATA[

<h2 id="買っちゃった">買っちゃった</h2>

<p><img src="IMG_0707.png" alt="" /></p>

<p><strong>volca modular、買っちゃったい</strong>。いやっほー_(:3」∠)_</p>

<h2 id="volca-modular">volca modular？</h2>

<p>volcaとは、KORGの生み出したシンセサイザーのシリーズでして、個人的にも大好きなシリーズです。コンパクトな筐体にハイエンドモデル顔負けの要素をこれでもかと積み込んで、<a href="https://www.korg.com/jp/products/dj/volca_fm/">FM音源を完全再現した上でUIをユーザーフレンドリーにして扱いやすくしたデジタルシンセサイザー</a>だったり、かと思えば<a href="https://www.korg.com/jp/products/dj/volca_kick/">キック音に特化しまくった超絶ニッチだけどスゴく使えるキックジェネレーター</a>だったり、<a href="https://www.korg.com/jp/products/dj/volca_keys/">王道のポリフォニックなアナログシンセサイザー</a>などなどを生み出してきたシリーズです。</p>

<p>個人的にも今までに<a href="https://www.korg.com/jp/products/dj/volca_keys/index.php">keys</a>、<a href="https://www.korg.com/jp/products/dj/volca_bass/index.php">bass</a>、<a href="https://www.korg.com/jp/products/dj/volca_kick/index.php">kick</a>、<a href="https://www.korg.com/jp/products/dj/volca_sample/index.php">sample</a>を購入してきましたが、今回新たにセミモジュラーシンセである<a href="https://www.korg.com/jp/products/dj/volca_modular/index.php">volca modular</a>を購入しました！</p>

<h2 id="モジュラーシンセサイザーって何よ">モジュラーシンセサイザーって何よ？</h2>

<p>モジュラーシンセサイザーはシンセサイザーの各機能をモジュールとして分割して、それぞれをパッチケーブルで接続します。利用するモジュールも接続の順番もその接続先もすべて自分でカスタマイズできる、非常に自由度の高いシンセサイザーの形式です。「ユーロラック規格」という統一規格があって、この規格に沿った設計のモジュールであれば異なるメーカーのモジュール間でもパッチケーブルで接続して使用する事ができます。</p>

<p>逆に言えば自由度が高いゆえに難易度も高く、モジュール1個だけでは何もできず複数のモジュールが必要になりますが、そのモジュール1個あたりでウン万円したりします。また、モジュールが多くなればそれを格納するラックも大型の物が必要になり、異なるサイズのラックを用意しないといけないという難点もあります。ハマったらなかなか抜け出せない沼ですが、とっかかりにくいのでそもそも初心者向けとは言えません。</p>

<p>多分、めちゃくちゃハマったら車1台分とかの金額を投入することになると思います_(:3」∠)_</p>

<p>そんなモジュラーシンセサイザーを、そこそこの自由度を保ちつつ扱いやすくしたのが<strong>セミモジュラーシンセサイザー</strong>です。モジュラー構造を持ちつつもあらかじめ内部でパッチングされているため、一般的なシンセサイザーのようにも利用できます。もちろん、モジュラーシンセサイザーの醍醐味であるパッチングもできるようジャックがしっかりと用意され、外部でパッチングされると内部のパッチをバイパスするような仕組みになっています。</p>

<p>このvolca modularはセミモジュラーシンセサイザーです。そう、パッチングなしに楽しむこともできますが、パッチングすることでモジュラー然とした見た目とサウンドを得られるのです。しかも、一般的なモジュラーシンセサイザーのモジュール1個分の価格で！ここまでの話で、いかにこのシンセが画期的であるかがおわかりいただけると思います。実際安い（忍殺語</p>

<h2 id="開封の儀">開封の儀</h2>

<p><img src="IMG_0701.png" alt="" /></p>

<p>外箱から。volcaに限りませんが、KORGの箱のデザインってイイですよね。</p>

<p><img src="IMG_0702.png" alt="" /></p>

<p>箱を開封するとモジュールのリファレンスがまず目に入ります。多分、触り始めた当初はこれがないとにっちもさっちも行かないのでは・・・モジュラーシンセサイザーの知識がある人だったら問題ないのでしょうが、そういう人ってコレ買わないと思うしなー。</p>

<p><img src="IMG_0703.png" alt="" /></p>

<p>同梱されているのは、前述のリファレンスと取扱説明書などです。あと、ソフトシンセのプロダクトキーが記載された紙もありました・・・けど、使うかなぁこれ_(:3」∠)_</p>

<p><img src="IMG_0704.png" alt="" /></p>

<p>さて、書類などを出すと本体と電池、パッチケーブルなどが見えますね。</p>

<p><img src="IMG_0705.png" alt="" /></p>

<p>本体を取り出したところ。ところどころにある黒い四角い部分は、パッチケーブルを差し込むジャックです。</p>

<p><img src="IMG_0707.png" alt="" /></p>

<p>本体を真上から。白いラインは内部パッチングを表しています。1本もパッチケーブルを利用しない場合は、この白いラインで表された内部パッチングを通過して音が出力されます。</p>

<h2 id="動作の様子など">動作の様子など</h2>

<p>とりあえず、まずはパッチングなしでプレイしてみました。volcaシリーズで培われたシーケンサーは、相変わらず直感的でおもしろいです。</p>

<p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Korgのvolca modular、買ってしまったのですが、パッチなしで既にこの出音でエグい(褒め言葉<a href="https://twitter.com/hashtag/volca?src=hash&amp;ref_src=twsrc%5Etfw">#volca</a> <a href="https://t.co/tkItOYT7Nv">pic.twitter.com/tkItOYT7Nv</a></p>&mdash; ysko (@unknown_strings) <a href="https://twitter.com/unknown_strings/status/1136555987450511360?ref_src=twsrc%5Etfw">2019年6月6日</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>もともとこの手のシンセは、いい意味で結構アバンギャルドな音なんですが、コイツもご多分に漏れずかなりキテます。いわゆるMOOGだったり往年のRolandやYamaha的なシンセサイザーとは異なる音で、好みは少し分かれるかもしれません。</p>

<p>コイツはいわゆる「ウエストコーストスタイル」なモジュラーシンセサイザーに分類されるのですが、前述のMOOGたちなどは「イーストコーストスタイル」なんですね。キーボードでの演奏を前提としているイーストコーストに比べると、ツマミでのパフォーマンスを前提にしているのか、とにかくツマミをグリグリやっているだけで時間が過ぎていきます。それぐらい楽しいです。ビキビキ言ってますぜ。</p>

<h2 id="まとめ">まとめ</h2>

<p><strong>良心的な値段とユーザーフレンドリーなUIに刺激的なサウンドを内包したアツいモジュラーシンセサイザー！</strong>です。</p>

<p>モジュラーシンセサイザーって、セミモジュラーシンセを含めてもそこそこの値段するので、2万円前後で買えるというのはもはや規格外と言ってしまっていいでしょう。それでいてモジュラーシンセの醍醐味をしっかり内包していて、サウンドもエキサイティングと、欠点らしい欠点がないです。</p>

<p>さあ、これでモジュラーシンセサイザーにハマって、沼に沈みましょう。沼は楽しいですよ。ほら、レンズ沼とかあるじゃないですか（ぐるぐる目</p>
]]></content>
		</item>
		
		<item>
			<title>SequenzのVolca Rackが来たのでレビューしてみる</title>
			<link>https://idontwannawork.github.io/posts/sequenz-volca-rack-review/</link>
			<pubDate>Sat, 15 Jun 2019 21:02:37 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/sequenz-volca-rack-review/</guid>
			<description>はじめに （個人的に）待望の、待望のvolca rackが来ました！ volca rack? volcaといえば、KORGの生み出した大ヒット商品でして、個人的にも大</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p>（個人的に）<strong>待望の、待望の<a href="https://sequenzmusicgear.com/products/volca_rack/">volca rack</a>が来ました！</strong></p>

<h2 id="volca-rack">volca rack?</h2>

<p>volcaといえば、KORGの生み出した大ヒット商品でして、個人的にも大好きなシリーズです。コンパクトな筐体にハイエンドモデル顔負けの要素をこれでもかと積み込んで、<a href="https://www.korg.com/jp/products/dj/volca_keys/">王道のポリフォニックなアナログシンセサイザー</a>だったり、かと思えば<a href="https://www.korg.com/jp/products/dj/volca_kick/">キック音に特化しまくった超絶ニッチだけどスゴく使えるキックジェネレーター</a>だったり、価格とサイズで<a href="https://www.korg.com/jp/products/dj/volca_modular/">攻めに攻めたセミモジュラーシンセサイザー</a>などなどを生み出してきたシリーズです。</p>

<p>そんなvolcaなんですが、どの機種でも筐体のサイズは全部一緒です。なので「ラックに格納したら良さげだよねー」というのがvolcaユーザーの思いでした。実際、DIYでvolca用のラックを作ってしまった人もいるようで、YouTubeなんかを見てるとたまに自作っぽいラックでvolcaをプレイしている動画なんかがあったりします。</p>

<p>そんな、多分誰もが「あったらいいよねー」と思っていたはずのラック。個人的にも結構欲しかったラック。それがこの度とうとう<strong>KORGオフィシャルで発売</strong>されました！</p>

<p>前置きが長くなりましたが、そのvolca rackを購入しましたのでレビューしてみよう！という記事です。</p>

<h2 id="開封の儀">開封の儀</h2>

<p>まずはおなじみな開封風景をどうぞ。</p>

<h3 id="外箱から">外箱から</h3>

<p><img src="IMG_0687.png" alt="pic" /></p>

<p>「取り扱いはていねいに」がデカデカと印字されておりますな。これに限りませんが、開封時のカッターは、品物本体を傷つけないよう気をつけたいものです。</p>

<p><img src="IMG_0693.png" alt="pic" /></p>

<p>箱側面には「2x2」と印字されています。そう、合計4つのvolcaを設置できるわけです。</p>

<h3 id="開封">開封</h3>

<p><img src="IMG_0694.png" alt="pic" /></p>

<p>箱を開けた直後。簡単な組み立て説明書があります。</p>

<p><img src="IMG_0695.png" alt="pic" /></p>

<p>Sequenzの小さいステッカーが同梱されていました。</p>

<p><img src="IMG_0696.png" alt="pic" /></p>

<p>説明書などを取り出すと各パーツが収納されています。</p>

<p><img src="IMG_0697.png" alt="pic" /></p>

<p>組み立ては6角レンチを用いてネジで行います。</p>

<p><img src="IMG_0699.png" alt="pic" /></p>

<p>取説は英語表記ですがなんの問題もありません。というか、これは絵だけでもいいのでは、ってレベルです。簡単です、簡単。</p>

<p><img src="IMG_0700.png" alt="pic" /></p>

<p>各パーツです。サイドパネルが木製なの、シンセサイザーラック然といった雰囲気でいいですよね。</p>

<p>なお、volcaを収納するメインパネルの内側には、滑り止めのゴムがあります。車のワイパーブレードみたいにはまっています。これのおかげでvolca本体の固定ができるわけですね。</p>

<h2 id="完成">完成</h2>

<p>5分くらいで組み立ては完成します。簡単です。</p>

<p><img src="IMG_0703.png" alt="pic" /></p>

<p>縦に設置するとこんな感じ。場所は取りませんが、この状態で操作するなら目線的には椅子が必須ですね。落ち着いて操作するにはこのポジションがいいかもしれません。</p>

<p>個人的に、インテリアとして置いておくにはこのポジションがベストだと思います。</p>

<p><img src="IMG_0704.png" alt="pic" /></p>

<p>横に設置するとこんな感じ。立ちながら操作するなら、個人的にはこのポジションがベストです。</p>

<p>なお、ご想像のとおりで、縦置きセッティングのまま横置きへと移行することは、ラックの天地が逆転してしまうためできません。移行するためには、一度volcaをぜんぶ引っこ抜いてセッティングし直す必要があります。まぁ、そこは仕方ないですね。</p>

<p><img src="IMG_0705.png" alt="pic" /></p>

<p>横から見るとこんな感じ。</p>

<p><img src="IMG_0706.png" alt="pic" /></p>

<p>Sequenzのロゴが手前側だと、横置きです。</p>

<p><img src="IMG_0707.png" alt="pic" /></p>

<p>縦置きにするとサイドはこんな感じ。</p>

<h2 id="とりあえず仮セッティング">とりあえず仮セッティング</h2>

<p><img src="IMG_0709.png" alt="pic" /></p>

<p><strong>いいですねー！</strong></p>

<p>単純に手持ちのvolcaを並べて見ましたが、それでもこの整然とした「ピッタリ感」はさすがオフィシャルと言えます。volcaをセッティングしたままインテリアとして置いておくとしても、なんの問題もない王道なデザインにグッときます。やっぱりこのサイドパネルが木製なのはいいですね（2回目</p>

<p>volcaは全面からはめ込んでいきます。このとき、はめ込むのにもラックから外すのも滑り止めのゴムが絶妙に支えてくれます。ケーブルを抜くのと一緒にvolcaが引っこ抜ける、なんてことはありませんでした。ただし、MIDIケーブルだけは結構しっかり挿さるので、さすがに本体を固定しないとラックからvolcaが釣れます_(:3」∠)_</p>

<p>自分はたまたまvolcaを4つ以上持っているので、問題ありませんでした。が、3つ以下しかなかったりするとラックに空きスペースができちゃうので、<strong>その空きスペースを埋めるためにまたvolcaシリーズを買うことになる</strong>でしょう。ええ、きっとそうなります（ぐるぐる目</p>

<p><img src="IMG_0710.png" alt="pic" /></p>

<p>ちなみに、<a href="https://www.korg.com/jp/products/dj/sq_1/">SQ-1</a>も設置できます。ただし、写真の通り、縦は少し足りません。縦が足りないため、滑り止めのゴムが仕事をしないので、縦置き時には下段に収納しないと、ふとした瞬間に落下しそうでちょっと怖いです。ただ、SQ-1の給電がUSBケーブルで、本体の上側麺にコネクターがあるのを考えると、上に多少スペースが開いてないとUSBケーブルが挿せなくて困るというのもあるのですが・・・。ケーブルをうまく回避しつつ、空きスペースをなにかで埋めればなんとかなりそうな気もします。あるいはもう電池駆動を前提にしちゃうとか。</p>

<p><img src="IMG_0711.png" alt="pic" /></p>

<p>ちょっと見にくくて申し訳ないですが、SQ-1でvolca modularをCVでコントロールしつつ、kickとsampleでドラムパターンを組めるようなセットアップにしてみました。<strong>イイですねー</strong>_(:3」∠)_</p>

<h2 id="まとめ">まとめ</h2>

<p><strong>volcaを複数台持っているようなvolcaファンには必須です！</strong></p>

<p>手持ちのvolcaを自由にセッティングでき、SQ-1も設置可能。その上インテリアとしてちゃんと成立するデザイン。非常にイイです。</p>

<p>volcaも（2019年6月16日現在で）また<a href="https://www.korg.com/jp/products/dj/volca_nubass/">新しい機材がリリースされる</a>ことですし、このラックにセッティングしてプレイしてみるのも一興かなと思います。</p>

<p>ああ、ウチのvolcaは今5台だからあと3台買えばもう1つラックにセッティングできるんだな・・・（ぐるぐる目</p>
]]></content>
		</item>
		
		<item>
			<title>VS CodeでDockerコンテナーのPython開発環境にリモート接続する</title>
			<link>https://idontwannawork.github.io/posts/connect-to-docker-with-vscode-extension/</link>
			<pubDate>Mon, 10 Jun 2019 00:52:30 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/connect-to-docker-with-vscode-extension/</guid>
			<description>はじめに Visual Studio Code（以下、vscode）を使って、Dockerのコンテナー上にある開発環境へリモートで接続します。このとき、ptvsdでは</description>
			<content type="html"><![CDATA[

<h2 id="はじめに">はじめに</h2>

<p>Visual Studio Code（以下、vscode）を使って、Dockerのコンテナー上にある開発環境へリモートで接続します。このとき、<a href="https://github.com/microsoft/ptvsd">ptvsd</a>ではなく、vscodeの拡張機能である<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">Remote</a>を用いて接続します。</p>

<h2 id="環境構築">環境構築</h2>

<h3 id="環境">環境</h3>

<ul>
<li>macOS Mojave 10.14.5</li>
<li>Docker version 18.09.2</li>
<li>Visual Studio Code version 1.35</li>
</ul>

<h3 id="拡張機能">拡張機能</h3>

<p>まずは何はなくとも下記の拡張機能をインストールします。</p>

<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">Remote - Containers</a></li>
</ul>

<p><img src="2019-06-09-19-47-16.png" alt="pic" /></p>

<p>RemoteはまだvscodeのInsider版でしか動作しなかった・・・のですが、6月6日にStable版でも対応しました。</p>

<h2 id="接続手順">接続手順</h2>

<p>基本的な手順は<a href="https://code.visualstudio.com/docs/remote/containers#_quick-start-try-a-dev-container">ここ</a>にあるものを参考にしています。</p>

<ol>
<li><p>Dockerアイコンをクリックして、メニュー中の「Preferences」をクリック。「File Sharing」を選択して、共有したいディレクトリが設定されているか確認する。</p>

<p><img src="2019-06-09-19-55-27.png" alt="pic" /></p>

<p>Dockerのメニュー中にPreferencesがあるはずなので、これをクリック。</p>

<p><img src="2019-06-09-19-56-03.png" alt="pic" /></p>

<p>表示されたディレクトリのうち、共有したいディレクトリが設定されていることを確認しておきます。</p></li>

<li><p>任意のコンテナーを準備します。今回はPython用のサンプルプロジェクトを<a href="https://github.com/microsoft/vscode-remote-try-python">microsoftが準備している</a>ので、これをcloneしました。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">~/devp  git clone https://github.com/microsoft/vscode-remote-try-python.git
Cloning into &#39;vscode-remote-try-python&#39;...
remote: Enumerating objects: 94, done.
remote: Counting objects: 100% (94/94), done.
remote: Compressing objects: 100% (70/70), done.
remote: Total 94 (delta 47), reused 51 (delta 18), pack-reused 0
Unpacking objects: 100% (94/94), done.</code></pre></div>
<p>ちなみに<a href="https://github.com/microsoft/vscode-remote-try-go">Golang用</a>やいろんな言語があったりします。</p>

<p>ただし、現在（2019年5月30日）のところAlpine LinuxやWindowsベースのコンテナーは<a href="https://code.visualstudio.com/docs/remote/containers#_getting-started">サポート外</a>とのこと。</p>

<blockquote>
<p>Note: Alpine Linux and Windows based dev containers are not currently supported.</p>
</blockquote></li>

<li><p>cloneした資産を拡張機能のRemoteで開きます。</p>

<p>vscodeを起動します。起動したら、vscodeの左下にある「&gt;&lt;」みたいな部分をクリックします。このとき、先ほどcloneしたディレクトリを開く必要はありません。</p>

<p><img src="2019-06-09-21-05-44.png" alt="pic" /></p>

<p>すると、vscode上部に4つほどコマンドがリストで表示されます。その中から<code>Remote-Containers: Open Folder in Container...</code>を選択します。</p>

<p><img src="2019-06-09-21-07-42.png" alt="pic" /></p>

<p>ディレクトリを選択するダイアログが表示されるので、先ほどcloneしたディレクトリを選択します。</p>

<p>ディレクトリを選択すると、画面がリロードされます。このとき、初回起動でコンテナーが存在していない場合はvscodeが自動的に生成します。しばらく待って、右下の「処理中」メッセージが消えたら準備完了です。</p>

<p><img src="2019-06-09-21-12-03.png" alt="pic" /></p>

<p>とりあえずこの時点で、パッと見はあまり普段と変化は感じられませんが・・・。</p>

<p><img src="2019-06-09-21-21-57.png" alt="pic" /></p>

<p>左下の部分を見ると「Dev Container: Python Sample」と表示されており、コンテナーに接続していることがわかります。</p>

<p><img src="2019-06-09-21-24-28.png" alt="pic" /></p>

<p>この状態でターミナルを起動し<code>docker ps</code>してみると、下記のようにコンテナーが起動していることがわかります。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">~ ❯❯❯ docker ps
CONTAINER ID        IMAGE                                                           COMMAND                  CREATED             STATUS              PORTS                      NAMES
3afa6cb8f1e2        vsc-vscode-remote-try-python-f50dab769712249e3a925e9d880f74de   &#34;/bin/sh -c &#39;echo Co…&#34;   6 minutes ago       Up 6 minutes        127.0.0.1:9000-&gt;9000/tcp   nervous_dirac</code></pre></div>
<p>こんな手順を踏めば、Dockerのコンテナー上で動作している開発環境にvscodeで接続できます。</p></li>
</ol>

<h2 id="デバッグしてみる">デバッグしてみる</h2>

<p>とりあえず接続はできたわけなので、今度は実際に動作確認とデバッグをしてみます。</p>

<p>コンテナーに接続しているvscode上でTERMINALタブを開きます。まずは、プロンプトが接続先のコンテナーであることを確認します。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">root@3afa6cb8f1e2:/workspaces/vscode-remote-try-python# uname
Linux</code></pre></div>
<p>本来、macOSのターミナルで<code>uname</code>を実行した場合は「Darwin」と返ってくるので、「Linux」と返ってくるならmacOSのそれではなくコンテナー上のプロンプトであると判断できます。</p>

<p>ここでデバッグが可能か確認するために、app.pyのソースで任意の行にブレークポイントを設定します。ちなみに、vscodeのデバッグメニューを見てみると<code>Flask</code>で設定済みだったりします。これはclone元ですでにlaunch.jsonが作成済みだからです。親切！</p>

<p><img src="2019-06-09-23-24-34.png" alt="pic" /></p>

<p>この状態で<code>F5</code>キーを押します。あるいはデバッグメニューから「Start Debugging」をクリックします。すると、コンテナーのプロンプトでPythonが実行され、下記のようなメッセージが表示されてFlaskが起動します。</p>
<div class="highlight"><pre class="chroma"><code class="language-console" data-lang="console">※実行コマンドは省略
 * Serving Flask app &#34;app.py&#34;
 * Environment: development
 * Debug mode: off
 * Running on http://0.0.0.0:9000/ (Press CTRL+C to quit)</code></pre></div>
<p>ブラウザを起動してローカルホストに9000ポートで接続します。この際、先ほど設定したブレークポイントで処理が一時的に停止するはずです。この状態で、ローカルで開発しているときと同様に変数値のチェックなどができます。vscodeはコンテナーにリモート接続していますが、それを意識することなく普段どおりの使い方が可能であるわけです。</p>

<p>ブレークポイントで停止している処理を続行してやれば、ブラウザがwebページを表示します。</p>

<p><img src="2019-06-10-00-03-10.png" alt="pic" /></p>

<p>これで動作確認とデバッグができました。</p>

<p>なお、実行を止めたい場合はいつもどおり<code>Shift + F5</code>を押せば止まります。</p>

<p>ちなみに、vscodeを終了するとコンテナーは自動的に停止します。<code>docker ps</code>で確認すると表示されなくなっているはずです。</p>

<h2 id="コンテナー設定を変更したらリビルドする">コンテナー設定を変更したらリビルドする</h2>

<p>コンテナーの設定を変更した場合は、vscodeの左下をクリックしてコマンドの一覧を表示します。</p>

<p><img src="2019-06-10-00-09-16.png" alt="pic" /></p>

<p>表示された一覧の中から<code>Remote Containers: Rebuild Container</code>を選択します。</p>

<p><img src="2019-06-10-00-10-13.png" alt="pic" /></p>

<p>画面がリロードされてコンテナーが再度ビルドされます。ビルドが終了すれば普段通りコンテナーを利用できます。</p>

<h2 id="まとめ">まとめ</h2>

<p>Dockerをインストールして、vscodeを導入し拡張機能のRemoteをインストールすれば、あとは欲しい環境をコンテナーで用意するだけで開発環境が揃います。ローカルに開発のための環境を用意する必要がないので、下手にローカル環境を汚すこともなくなります。</p>

<p>ベタなセリフですが、すごい時代になったものです、ホントに。</p>
]]></content>
		</item>
		
		<item>
			<title>macOSアップデート後のxcrunエラーはxcodeをインストールする</title>
			<link>https://idontwannawork.github.io/posts/xcrun-error-after-macos-update/</link>
			<pubDate>Sun, 09 Jun 2019 19:29:47 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/xcrun-error-after-macos-update/</guid>
			<description>macOSあるある？ macOSのアップデート（High SierraからMojave）後にgitを実行するとxcrunが見つからないよ！という</description>
			<content type="html"><![CDATA[

<h2 id="macosあるある">macOSあるある？</h2>

<p>macOSのアップデート（High SierraからMojave）後にgitを実行すると<code>xcrun</code>が見つからないよ！というエラー内容が出現しました。</p>

<p>経験上このエラーメッセージが出現するのってmacOSのアップデート直後なんですよね・・・。そんなわけで毎度調べるのもアレなのでメモしておきます。</p>

<h2 id="エラー内容">エラー内容</h2>

<p>macOSをアップデートした際に、gitを実行しようとすると下記のようなエラーになることがあります。</p>

<pre><code>~ ❯❯❯ git
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
</code></pre>

<p>他のコマンドでも同じようなエラーメッセージが出現するのかな？</p>

<h2 id="解消法">解消法</h2>

<p>下記のコマンドを発行します。</p>

<pre><code>xcode-select --install 
</code></pre>

<p>「インストールしますか？」という旨のメッセージが表示されたらOKします。インストールは十数秒で終わると思います。インストールが終わればgitは使えるようになります。</p>
]]></content>
		</item>
		
		<item>
			<title>TASCAMのiXZを使ってiPhoneでレコーディングする</title>
			<link>https://idontwannawork.github.io/posts/recocrd-with-tascam-ixz/</link>
			<pubDate>Tue, 04 Jun 2019 17:11:23 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/recocrd-with-tascam-ixz/</guid>
			<description>そもそもiXZって何ぞや TASCAMが販売しているスマートフォン・タブレット端末用オーディオインターフェイスです。発売は2011年とめちゃく</description>
			<content type="html"><![CDATA[

<h2 id="そもそもixzって何ぞや">そもそもiXZって何ぞや</h2>

<p><img src="IMG_0671.png" alt="pic" /></p>

<p><a href="https://tascam.jp/jp/product/ixz/top">TASCAMが販売している</a>スマートフォン・タブレット端末用オーディオインターフェイスです。発売は2011年とめちゃくちゃ昔なのですが現役で販売されていることからもわかる通り、スマートフォン・タブレット端末で利用できる手軽なインターフェイスの王道です。</p>

<p>特徴としては、スマートフォンなどに「アナログで接続する」という点。そして、ギター専用の<a href="https://www.ikmultimedia.com/products/irig2/?L=JP">iRig</a>のような「スマートフォンに直接接続する」仕様であるにもかかわらず、ギターだけじゃなくコンデンサーマイクの利用も可能な点でしょうか。</p>

<h2 id="仕様">仕様</h2>

<p><img src="IMG_0679.png" alt="pic" /></p>

<p>サイズは<code>106（W）× 40（H）× 45（D）mm</code>と、最近大型化しているスマートフォンと比べると厚さ以外は割とコンパクト。単3電池2本がセット可能ですが、電池を含めないと100gを切るくらいの軽量さ。</p>

<p>入力端子はハイインピーダンス入力に対応していて、ギターなどを直接接続できます。また、端子がXLR/TSコンボジャック仕様で、ギター・ベースやシンセサイザーなどの標準プラグだけでなく、XLR端子をもつマイクも接続可能です。さらに、単3電池2本によるファントム電源の供給が可能で、コンデンサーマイクの接続もできるとあって、実売価格が4000円前後の商品としては割と充実した装備です。</p>

<p>スマートフォンやタブレットへの接続には、本体から「ニョキッ」と生えている4極端子を用います。デバイスのヘッドホン端子に接続することで、アナログでのレコーディングができるようになるわけです。最近だとLightning端子などに接続してデジタルでレコーディングする機種もありますが、ヘッドホン端子でのアナログ接続ならAndroidとiOSの双方で利用できるので、ありがたいです。まぁ、最近はそもそも<a href="https://www.apple.com/jp/iphone-xs/">ヘッドホン端子</a>が<a href="https://www.apple.com/jp/iphone-xr/">存在しないスマホ</a>も<a href="https://www.nttdocomo.co.jp/product/smart_phone/so01l/">ゴロゴロ</a>ありますけどね・・・。</p>

<p>ちなみに、説明書などにはこの機種が利用できるデバイスを「4極端子（CTIA規格）を搭載した端末に限ります」としているのですが、4極端子を装備していないデバイスって最近あるんですかね？</p>

<p>また、本体背面の3.5mmステレオミニジャックにイヤホンやヘッドホンを接続することで、音声出力をモニターしながらレコーディングできます。まぁ、この「モニターしながらレコーディングできる」って言うのが、<strong>ちょっとした罠</strong> になっているんですけどね・・・_(┐「ε:)_（後述）</p>

<p>なお、当機種はiOSにおける動作検証の対象機材となっており<a href="https://tascam.com/jp/support/news/5751">サポートページ</a>でiOS12における動作が確認されていることから、今後もしばらくは安心して使用できます。ただ、Lightning端子に接続するようなデジタル仕様じゃないので、OSの変更で影響が出てくるのか？と問われると、「ぶっちゃけ関係ないんじゃないの？」と首をかしげるところではありますが。</p>

<p>ちなみに、細かいところにツッコミを入れるなら、多分USBオーディオインターフェイスじゃないと思うんですけど（名推理）</p>

<p><img src="2019-06-04-17-36-25.png" alt="pic" /></p>

<h2 id="使い方">使い方</h2>

<h3 id="接続">接続</h3>

<p>使い方は、正面の入力端子にギターやシンセを接続し、背面の4極ミニプラグケーブルをスマートフォンやタブレットのヘッドホンを接続します。また、本体の背面にあるヘッドホン端子へ対しヘッドホンなどを接続して音声出力をモニターします。</p>

<p><img src="2019-06-04-18-09-02.png" alt="pic" /></p>

<p>このとき、標準ジャックを利用するのであれば電池は不要です。電池は、コンデンサーマイクを接続する際のファントム電源の供給にのみ利用するからです。</p>

<h3 id="音量調整">音量調整</h3>

<p>音量はデバイスのボリュームを調整することで操作します。</p>

<h3 id="さあレコーディング-あれ">さあレコーディング！・・・あれ？</h3>

<p>接続はこれで終わりです。ただこれだけではレコーディングできません。そう、<strong>アプリ</strong>が必要なのですよ・・・！</p>

<h3 id="アプリは">アプリは？</h3>

<p>iXZ用のアプリというものはリリースされていません。じゃあどうするか？</p>

<p><strong>好きなアプリを使えばいいんじゃね？</strong>、です。</p>

<p>そう言ってしまうと冗談に聞こえますが割とマジです。何せアナログの入力なので、プロテクトも何もないわけですから、極端なことを言えばスマホに標準搭載されているカメラアプリを使って録画してもいいわけです。あるいは、iOSであれば<a href="https://www.apple.com/jp/ios/garageband/">GarageBand</a>がパッと思い浮かぶところでしょうか。</p>

<p><strong>慣れ親しんだアプリを使ってね</strong>という、TASCAMの思いやりなのかもしれないデスネ（ぐるぐる目）</p>

<h2 id="つまづいたところ">つまづいたところ</h2>

<p>単純明快なアナログ接続のiXZですが、スムーズに万事うまく行ったわけではありませんでした。というのが、<strong>音声入力のモニターができるか否かはアプリに依存</strong>する点です。</p>

<p>当初、この機種の動作確認を行うのに、iPhoneのカメラアプリを利用しました。ところが、接続したイヤホンから音声のモニターができないのです。かすかな「サー」というホワイトノイズが彼方に聞こえるのみで、INPUTのダイヤルをひねろうとiPhoneの音量を調整しようと一向に音声をモニターできません。</p>

<p>「あちゃー、初期不良かなー」と思いましたが、録画した動画を再生してみるとしっかりと入力した音声が録画されていました。<strong>つまり、音声入力は取得できているけど、それをモニターできない</strong>わけでした。</p>

<p>少し調べてみたところ「モニターの可否は、レコーディングに利用するアプリが<strong>入力された音声を出力へ返してくれるかどうか</strong>に依存している」ということがわかりました。</p>

<p>つまり、iXZは録音するデバイス（この場合iPhone）からの音声出力を単純にイヤホンに出力しているだけで、iXZ本体でイヤホンジャックに向けて配線しているわけではない、ということです。なので、モニタリングできるよう入力された音声を出力できるようなアプリを利用すればよい、ということになります。</p>

<p>ただし、GarageBandのようなアプリは動画ではなく音声のみを録音するので、「動画を取りつつ音声をモニターしたい」というニーズには残念ながら大抵のアプリが非対応、ということになります。</p>

<p>この場合、根本的な解決策はモニターできる録画アプリを探すことになります。が、今回は録画したかったものがKORGのvolcaをいじる場面だったので、ステレオミニプラグを分岐させるアダプターを利用しました。volcaのアウトプットに分岐アダプターを接続し、一方はiXZに接続しつつもう一方をイヤホンやスピーカーに接続することで、モニターしながら録画できる環境にしました。</p>

<h2 id="使った感じはどうなのよ">使った感じはどうなのよ？</h2>

<p><strong>スゲーお手軽・・・！！</strong> _(┐「ε:)_</p>

<p>これなんですよねぇ。レコーディングしたい機材をパパッと接続して、アプリを起動して録音するだけ。それ以上の操作は必要ないうえ、どこへでも持って行けるサイズ。ギターなどを接続するなら電池も不要で、とにかく身軽かつ気軽。</p>

<p>アナログ特有のノイズはどうしてもありますが、言うほど気にはなりません。これ以上を望むならもう少し出費してデジタルのオーディオインターフェイスを準備するほうが、精神衛生上よろしいかと思います。</p>

<p>というか、この手のインターフェイスでギターとマイクが接続できるものはiXZが今の所最安値です。より良い環境を求めるなら自動的に出費する以外にはありません。強いて言えばiRigですけど、あれはギターとかの標準プラグのみ対応してる機種ですしね。</p>

<p>気になったと言えば、iXZ本体にイヤホンを接続してモニターする場合、原音と比べて若干音がマイルドになるというか、少しハリがなくなるというか、そんな気がします。良く言えば「角が取れて落ち着く」、悪く言えば「ヌケが悪くなってダルい」。ただし、イヤホンはあくまでもモニター用ですしiPhone本体にはそこそこのヌケで録音されているので問題ないでしょう。</p>

<p>そして何よりこの値段設定が素晴らしい。コストパフォーマンスとしては、100点満点じゃないでしょうか。</p>

<h2 id="まとめ">まとめ</h2>

<p><strong>身軽でお手軽な上、コスパまで備えた働き者</strong>です。</p>

<p>スマートフォンやタブレットを利用してレコーディングしたい、ギターだけじゃなくてマイクも使いたい、小難しいのはいいからとにかく気軽にやりたい。</p>

<p>そんな人にぜひオススメしたい、良質なインターフェイスです。</p>
]]></content>
		</item>
		
	</channel>
</rss>
