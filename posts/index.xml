<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Come as you are</title>
		<link>https://idontwannawork.github.io/posts/</link>
		<description>Recent content in Posts on Come as you are</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 05 Apr 2019 10:15:49 +0900</lastBuildDate>
		<atom:link href="https://idontwannawork.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Hugoで静的サイトを生成してみる</title>
			<link>https://idontwannawork.github.io/posts/make-site-with-hugo/</link>
			<pubDate>Fri, 05 Apr 2019 10:15:49 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/make-site-with-hugo/</guid>
			<description>Hugoとは Golangで作られている、静的サイトジェネレータ。なんでも、生成が速いらしい。 今回はコイツを使って、サイトを生成し公開してみる</description>
			<content type="html"><![CDATA[

<h1 id="hugoとは">Hugoとは</h1>

<p>Golangで作られている、静的サイトジェネレータ。なんでも、生成が速いらしい。</p>

<p>今回はコイツを使って、サイトを生成し公開してみる。</p>

<h1 id="手順">手順</h1>

<p>基本的には<a href="https://gohugo.io/getting-started/quick-start/">ここ</a>を参考にしている。以下の手順はWindows10にて行っているが、多分Macとかでも同様なはず。</p>

<p>なお、個人的な好みでWindowsのコマンドプロンプトではなくbusyboxで実行しているが、普通にコマンドプロンプトやPowerShellで実行しても問題ないと思う。</p>

<ol>
<li><p>Golangのインストール</p>

<p>Golangの<a href="https://golang.org/">オフィシャル</a>から、自分が利用するプラットフォーム用のインストーラをダウンロードして実行する。この記事を書いている現在での最新は1.12.1。</p></li>

<li><p>Hugoのインストール</p>

<p>Hugoの<a href="https://github.com/gohugoio/hugo/releases">Github</a>から、自分が利用するプラットフォーム用のインストーラをダウンロードして展開する。この記事を書いている現在での最新は0.54.0。</p>

<p>インストール後、Hugoのbin（実行ファイルが格納されているアドレス）を環境変数に追加する。GUIでもいいし、<code>setx</code>コマンドを実行してもいい。インストールした後で、下記コマンドを実行してみる。</p>

<pre><code>~ $ hugo version
Hugo Static Site Generator v0.54.0-B1A82C61 windows/amd64 BuildDate: 2019-02-01T09:42:02Z
</code></pre>

<p>上記のように返ってくればOK。</p></li>

<li><p>サイトを生成</p>

<p>以下のコマンドを実行してサイトを生成する。<code>hoge</code>の部分は任意で、自分が生成したいサイト名でいい。なお、この名前でフォルダが作成される。実行したら生成されたフォルダに移動する。</p>

<pre><code>$ hugo new site hoge
$ cd hoge
</code></pre></li>

<li><p>テーマを決定</p>

<p><a href="https://themes.gohugo.io/">Hugoのテーマを集めたページ</a>を参照して、好みのテーマを探す。カスタマイズしたり、自力で作成することももちろん可能だが今は触れない。今回はミニマムなデザインが気に入ったので、<a href="https://themes.gohugo.io/hermit/">Hermit</a>にしてみた。</p>

<p><img src="/images/hermit.png" alt="Hermit" /></p>

<p>テーマを決めたら下記のコマンドを実行して、gitでGitHubから必要なファイルをダウンロードする。なお、導入手順はテーマのページにしっかり記述されている。親切！</p>

<pre><code>$ git init
$ git submodule add https://github.com/Track3/hermit.git themes/hermit
</code></pre>

<p>ここまで実行すると、下記のようなフォルダとファイルの構成が出来上がっているはず。</p>

<pre><code>.
├── archetypes
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
</code></pre>

<p>この時点で下記のコマンドを実行するとサイトが生成される。ただし、コンテンツを作成していないため、トップページだけが生成されて中身はなにもない。</p>

<pre><code>$ hugo
</code></pre></li>

<li><p>設定ファイルを変更</p>

<p>ファイル<code>config.toml</code>に設定を追記する。</p>

<p>オフィシャルでは下記のコマンドを実行するだけでいい、としている。要はテーマの名前を追加している。生成直後の設定ファイルの中身だと、何のテーマを利用するかわからないので追記してやる必要があるからだ。</p>

<pre><code>$ echo 'theme = &quot;ananke&quot;' &gt;&gt; config.toml
</code></pre>

<p>ただ、一応これ以外にも後々修正する部分があるので、この時点で編集してしまっても問題ない。それと、他のテーマはわからないがHermitに関して言えば、<code>config.toml</code>は自分で記述するのではなくて、<a href="https://github.com/Track3/hermit/blob/master/exampleSite/config.toml">用意されたもの</a>を流用して中身を編集した方がいい。というのは、テーマによってはこの設定ファイル中に特定の設定値がないと、<code>hugo</code>コマンドでのサイト生成時にエラーになる可能性があるからだ・・・実際、それで30分ほど無駄にした_(┐「ε:)_</p></li>

<li><p>記事を作成</p>

<p>下記のコマンドを実行すると<code>content</code>フォルダ配下にファイルを生成する。</p>

<p>$ hugo new hoge.md</p>

<p>この際、出力先のフォルダを指定することができる。下記のコマンドでは、<code>content</code>フォルダ配下に<code>posts</code>フォルダが存在しなければ自動的に生成してから、ファイルを生成する。カテゴリだとかジャンル別にファイルを分別したい場合に有効な方法。</p>

<p>$ hugo new posts/hoge.md</p>

<p>生成された直後のファイルの中身は下記のような感じ。</p>

<pre><code>---
title: &quot;Hoge&quot;
date: 2019-04-04T18:21:09+09:00
draft: true
---
</code></pre>

<p>ここに記事をMarkdown形式で記述する。ちなみに、ファイル冒頭の<code>draft</code>はtrueだと下書き扱いになる。<code>hugo server</code>とかでファイル生成すると内容の確認はできるんだけど、<code>public</code>フォルダには出力されない（下書きだから）。なので、サイト公開時には忘れずに<code>draft: false</code>にしておく必要がある・・・じゃないと、地味に30分くらいハマることになるので_(┐「ε:)_</p>

<p>なお、Windowsあるある・・・かどうかはよくわからないけど、UTF-8でファイルを保存しておかないとコマンド<code>hugo</code>の実行時にエラーになるので注意。</p></li>

<li><p>サーバーを起動して確認</p>

<p>下記のコマンドを実行する。</p>

<pre><code>$ hugo server -D
</code></pre>

<p>その後ブラウザで<a href="http://localhost:1313/"><code>http://localhost:1313/</code></a>にアクセスする。</p>

<p>なお、ブラウザで生成したサイトを表示させたまま<code>config.toml</code>や記事の内容をいじったりすると、そのまま反映される。スゲェ。</p>

<p>ちなみに、Hugoのサーバーを終了するには<code>Ctrl+C</code>を押す。</p></li>

<li><p>固定ページなどの表示設定</p>

<p>ここからの作業は任意だが、大抵のblogにはコンテンツ以外に「このページについて」みたいな固定ページが存在する。そういった、コンテンツ以外のページも必要に応じて追加する。</p>

<p>追加する手順は基本的に記事を生成する際と何ら変わらない。注意するのは<code>content</code>フォルダ配下の構成と<code>config.toml</code>ファイルの設定内容。例えば、<code>content</code>フォルダの内容が下記の通りだったとする。<code>page</code>と<code>posts</code>はフォルダだ。</p>

<pre><code>.
├── page
│    └── hoge-page.md
├── posts
│    ├── content1.md
│    ├── content2.md
│    └── content3.md
└── about.md
</code></pre>

<p>この場合、設定ファイルの<code>config.toml</code>の内容を下記の通り記述することで、ファイルと生成後の出力内容を紐づけることができる。</p>

<pre><code># コンテンツ用設定
  [[menu.main]]
    name = &quot;Posts&quot;
    url = &quot;posts/&quot;
    weight = 10

# 固定ページ用設定。
  [[menu.main]]
    name = &quot;pages&quot;
    url = &quot;page/&quot;
    weight = 10

# 「このページについて」ページの設定。
  [[menu.main]]
    name = &quot;About&quot;
    url = &quot;about/&quot;
    weight = 10
</code></pre>

<p>なお、ここで<code>*.md</code>ファイルを単体で置いておくと1枚の単体ページとしてHTMLファイル生成される。が、1つ以上の<code>*.md</code>ファイルをフォルダ配下に格納しておくと、各記事をHTMLファイルに変換するのと同時に、自動的にリストページを生成してくれる。便利。</p>

<p>ただし、前述の下書き設定<code>draft</code>がtrueになっていたりすると、Markdownファイルがあっても下書き扱いとなるのでHTMLファイルが生成されない（ローカルでの内容確認はできるが、<code>public</code>フォルダに出力されない）。そのため、メニューに項目があってもファイルが存在せず404になってしまうので、そこだけは注意が必要。</p></li>
</ol>

<h1 id="というわけで">というわけで</h1>

<p>当ページは<a href="https://gohugo.io/">Hugo</a>と<a href="https://github.com/Track3/hermit">Hermit</a>で作成されています_(┐「ε:)_</p>
]]></content>
		</item>
		
		<item>
			<title>チュートリアルを卒業したくらいが一番ツラい</title>
			<link>https://idontwannawork.github.io/posts/after-tutorial/</link>
			<pubDate>Thu, 04 Apr 2019 18:38:04 +0900</pubDate>
			
			<guid>https://idontwannawork.github.io/posts/after-tutorial/</guid>
			<description>チュートリアルってあるよね どんなプログラミング言語やライブラリやフレームワークでもあるもの、チュートリアル。「Getting Started」</description>
			<content type="html"><![CDATA[

<h1 id="チュートリアルってあるよね">チュートリアルってあるよね</h1>

<p>どんなプログラミング言語やライブラリやフレームワークでもあるもの、チュートリアル。「Getting Started」とか書かれたりもする。そして大抵の人がチュートリアルに触れて、場合によってはちょっと値を自分流に編集したりして、対象の雰囲気をざっくり掴むのに使う。そして、そこから「自分が作りたいもの」を目指していく。</p>

<p>文章として記述するとこれだけなんだけど、自分はチュートリアルをやった<strong>直後にモチベーションがガクッと下がる</strong>。折れるまでは行かなくとも、再起するのに苦労する。</p>

<h1 id="何故なんだぜ">何故なんだぜ</h1>

<p>結論から言ってしまえば、<strong>チュートリアル卒業レベルでは作りたいものは作れない</strong>から。</p>

<h1 id="何言ってんだ">何言ってんだ</h1>

<p>「チュートリアル」は基本的にほんの触りだけ。だから内容としては薄かったりしょぼかったりする。仕方ない、「触り」だもの。
「自分が作りたいもの」は、既存の製品だったりサービスだったり「すでに稼働しているスゲーやつ」を見た後で、「特定の問題やニーズを解消したい」あるいは「似たものを作りたい」という風に発生する感情だったりする。</p>

<p>大抵はこの感情が発露する時点で、中途半端に目が肥えていたり、利用する側としての経験値を得てしまっている。</p>

<p>たぶん、これが問題なんだ。</p>

<h1 id="だからどういうことだってばよ">だからどういうことだってばよ</h1>

<p>中途半端に目が肥えてしまった上に、なまじ既存サービスが利用できてしまうため、チュートリアルに毛が生えたレベルでは下記の感情に対処しにくい。</p>

<ul>
<li>見た目がしょぼい</li>
<li>機能少ない</li>
<li>そもそも自分が作る必要あるの？</li>
</ul>

<h1 id="あー-なんて言えばいいのかな">あー・・・なんて言えばいいのかな</h1>

<p>こんな例えはどうだろう。</p>

<p>ふと、「アクションゲームを作りたい」と思ったあなた。そう、そこのあなた。どうして作りたいと思った？アサシ〇クリードとかプレイして、「面白えー！すげー！俺も作ってみてー！」って、そう思ったんじゃない？「これで俺も『クリエイター』で『ミリオネア』だぜー！うひょー！」とか、人と場合によっちゃ思ったんじゃない？
そして、その感情迸るままUnityのチュートリアルに触れたりしちゃってるんじゃない？</p>

<p>あるいはTwit〇erにほんのちょっとした不満のあるあなた。そう、あなた。確かにTwit〇erは、興味のあるカテゴリだけ抽出してタイムラインに流すのは難しい。うん、その通りだ。プログラミング関係がフォローした人が、プログラミングのことだけツイートすることってあんまりないよね。場合によっては旅行のことだったり、引退するスポーツ選手のことをツイートしてたりする。
だから「カテゴライズして必要な情報だけタイムラインに流したいな。そういうサービス作ろうかな」って思ったりするんじゃない？そして「動作が軽いって評判のGolangやってみるかな」って思ったりして、Gopherに見守られながらチュートリアルをやってみたりしてるんだよね？</p>

<p>オーライ、そこで質問なんだけど、そのチュートリアルってアレク〇オスが画面を縦横無尽に動き回るような、そんな<strong>アグレッシブで派手なチュートリアル</strong>かな？
あるいは、Bo〇tstrapなんかのフレームワークよろしく美しくデザインされたUIにいろんな機能がモリモリ実装できるような、そんな<strong>洗練されたチュートリアル</strong>かな？</p>

<p>そして何より、チュートリアルを卒業したあなたは、<strong>卒業したての今、まさにこの瞬間</strong>、どんなものを作れるのかな？見た人が、利用した人が、プレイした人があっと驚き感動し熱中するようなものだろうか？</p>

<p>そんな訳がない。<strong>そんな訳がないのだ</strong>。</p>

<h1 id="現実に立ち返る">現実に立ち返る</h1>

<p>昨今あらゆる機能や情報が提供されるwebサービスにおいても、ジャンルが細分化されまくってるゲームもスマートフォンのアプリにおいても同様のことが言える。
自分よりずっと知識も経験も技術も熱意も、場合によっては将来の時間すらも持ち合わせた先人たちがいる。そんな一騎当千の偉人たちが綿々と作り上げてきた実績を見た、一介の雑兵ができることなどたかが知れているんだ。</p>

<p>どうしろって言うんだ。</p>

<hr />

<p>オーライ、わかった。やればいいんだろ、やれば。とにかくやるしかないんだ、悩んでる時間も惜しいんだ、おっさんはさ。</p>

<p>・・・というわけで、日々の学習内容を書いたりトラブルをメモったり、たまに全然関係ない記事を書いたりする予定。どうぞ、よしなに。</p>
]]></content>
		</item>
		
	</channel>
</rss>
